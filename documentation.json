{
    "pipes": [],
    "interfaces": [
        {
            "name": "AuthRepository",
            "id": "interface-AuthRepository-c931ec5ba5351ca6879033de91a056b2f41ee7968e32fcaf997eecd5d428fa3afd46eb5703315d1cbbaefa74f34621bdc0b98223ac5eebda6fdc0ff3578d17e5",
            "file": "projects/backoffice/src/app/core/domain/repositories/auth.repository.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\nimport { Tokens } from '../../application/tokens.interface';\r\nimport { AuthEntity } from '../entities/auth.entity';\r\n\r\nexport interface AuthRepository {\r\n  login(auth: AuthEntity): Observable<Tokens>;\r\n  getNewAccessToken(refreshToken: string): Observable<Tokens>;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "getNewAccessToken",
                    "args": [
                        {
                            "name": "refreshToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Tokens>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "refreshToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "auth",
                            "type": "AuthEntity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Tokens>",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "auth",
                            "type": "AuthEntity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "CovidModel",
            "id": "interface-CovidModel-0610c3cab3f8b858ed81e8a4647e0b6b67eb101f2b8a4ab188e906cade3dd4bdd4235c5fc1fe07cc52defb8c7dcb987de4a91171ac7edf845b7570761da53421",
            "file": "projects/backoffice/src/app/dashboard/domain/models/covid.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CovidModel {\r\n  provinceState?: string;\r\n  countryRegion: string;\r\n  lastUpdate: number;\r\n  lat?: number;\r\n  long?: number;\r\n  confirmed: number;\r\n  deaths: number;\r\n  recovered: any;\r\n  active: any;\r\n  admin2?: string;\r\n  fips?: string;\r\n  combinedKey: string;\r\n  incidentRate?: number;\r\n  peopleTested: any;\r\n  peopleHospitalized: any;\r\n  uid: number;\r\n  iso3?: string;\r\n  cases28Days?: number;\r\n  deaths28Days?: number;\r\n  iso2?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "admin2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "cases28Days",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "combinedKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "confirmed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "countryRegion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "deaths",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "deaths28Days",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "fips",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "incidentRate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "iso2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "iso3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "lastUpdate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "lat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "long",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "peopleHospitalized",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "peopleTested",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "provinceState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "recovered",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "uid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "CovidRepository",
            "id": "interface-CovidRepository-d5500171e790dfa4eb5eeba922635a9d884e9b3fd1fda2451444cb0fa00cbaf8b67580b81f9ac68952d0a40a849aa3da66a58b51d5c0d232f6abb0773c835fcb",
            "file": "projects/backoffice/src/app/dashboard/domain/repositories/covid.repository.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\nimport { CovidModel } from '../models/covid.model';\r\n\r\nexport interface CovidRepository {\r\n  getCovidData(): Observable<CovidModel[]>;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "getCovidData",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<CovidModel[]>",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ]
        },
        {
            "name": "DataCovid",
            "id": "interface-DataCovid-e2869dc213a589f4b4ee1594b1e3c4a4e14e3f92d2dda9531cc5901340b91453419da2b2fde90212f325995d9b48c5acdd617545a584d8f77485b1a038f28077",
            "file": "projects/backoffice/src/app/dashboard/domain/entities/data-covid.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DataCovid {\r\n  name: string;\r\n  value: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DriverRepository",
            "id": "interface-DriverRepository-366e0fa2c81f12b42b48a1f839f7899e42f41424e2822510b7cd8e58b4a8709454b1c139dc3bcc7482ba97a8f2b9da7801f338a0ff93bc5a3dc8a915e9e722e4",
            "file": "projects/backoffice/src/app/drivers/domain/repositories/driver.repository.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\nimport { ResultPage } from '../../../shared/interfaces/result-page.interface';\r\nimport { DriverEntity } from '../entities/driver.entity';\r\n\r\nexport interface DriverRepository {\r\n  getPage(page: number): Observable<ResultPage<DriverEntity>>;\r\n  delete(id: number): Observable<DriverEntity>;\r\n  update(id: number, driver: DriverEntity): Observable<DriverEntity>;\r\n  insert(driver: DriverEntity): Observable<DriverEntity>;\r\n  list(): Observable<DriverEntity[]>;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<DriverEntity>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ResultPage<DriverEntity>>",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "driver",
                            "type": "DriverEntity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<DriverEntity>",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "driver",
                            "type": "DriverEntity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<DriverEntity[]>",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "driver",
                            "type": "DriverEntity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<DriverEntity>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "driver",
                            "type": "DriverEntity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "IIcon",
            "id": "interface-IIcon-aa65d1965340bf61ac4ce0a5b3cce05ac511601d62001761e59357a97e10fd361ead70480408193e69654e5f9036d4302beb3b9888e1881ecf56ec228c346158",
            "file": "projects/backoffice/src/app/helpers/services/icon.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { MatIconRegistry } from '@angular/material/icon';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\ninterface IIcon {\r\n  name: string;\r\n  path: string;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class IconService {\r\n  private listIcons: IIcon[] = [\r\n    { name: 'exportToExcel', path: '../assets/img/icons/excel.svg' },\r\n    { name: 'exportToPdf', path: '../assets/img/icons/pdf.svg' },\r\n  ];\r\n\r\n  constructor(\r\n    private matIconRegistry: MatIconRegistry,\r\n    private domSanitizer: DomSanitizer\r\n  ) {\r\n    this.registryIcons();\r\n  }\r\n\r\n  registryIcons() {\r\n    console.log('registry icons');\r\n    this.listIcons.forEach((icon: IIcon) => {\r\n      this.matIconRegistry.addSvgIcon(\r\n        icon.name,\r\n        this.domSanitizer.bypassSecurityTrustResourceUrl(icon.path)\r\n      );\r\n    });\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IInactivity",
            "id": "interface-IInactivity-c214d847c7d22c8d1f3c77362f16f5c48b5470abc45a4ffbcd5f01e936a3bda845d84876e6e7ae4b86bb9ff21bb7c80cbfe44cb2cf7818836a0a3ca55414fcd1",
            "file": "projects/backoffice/src/app/config/interfaces/inactivity.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IInactivity {\r\n  timeout: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "timeout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ILayout",
            "id": "interface-ILayout-a167b06909aa206bf13658c0866898284e7293d8c03ed4406d8b62ffe8204d0e4883e3bfbc449b49e098977623b3396135328fce31f6257bdecdf5dee57b4b14",
            "file": "projects/backoffice/src/app/config/interfaces/layout.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ILayout {\r\n  header: boolean;\r\n  menu: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "menu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IPayload",
            "id": "interface-IPayload-398f54e9c2352119474d120e93c22dbf42fcf4f7a1b987696009c937ddf787095ff75fa191820a7bc6380414584e6cf362f3784f5d6d674eedb8c1143099043a",
            "file": "projects/backoffice/src/app/core/infrastructure/storage.infrastructure.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { StorageRepository } from '../domain/repositories/storage.repository';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\ninterface IPayload {\r\n  name: string;\r\n  email: string;\r\n  roles: string[];\r\n}\r\n\r\n@Injectable()\r\nexport class StorageInfrastructure implements StorageRepository {\r\n  setStorage(nameProperty: string, value: string): void {\r\n    sessionStorage.setItem(nameProperty, value);\r\n  }\r\n  getStorage(nameProperty: string): string | null {\r\n    return sessionStorage.getItem(nameProperty);\r\n  }\r\n  clear(): void {\r\n    sessionStorage.clear();\r\n  }\r\n\r\n  getFieldInToken(field: string): string | string[] {\r\n    const accessToken = this.getStorage('accessToken') as string;\r\n    const payload: any = jwtDecode(accessToken) as IPayload;\r\n\r\n    return payload[field];\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IPayload",
            "id": "interface-IPayload-a04782aa5af6660a4772fbabee1cbf9992def225129e75749c430b4d0675b19fa7789f4c4c6af7919c1ee6b444af5f76655e95968af5e8a00cc24f51415ba522-1",
            "file": "projects/backoffice/src/app/core/components/header/header.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Inject, OnInit } from '@angular/core';\r\nimport { AuthApplication } from '../../application/auth.application';\r\nimport { StorageApplication } from '../../application/storage.application';\r\nimport jwt_decode from 'jwt-decode';\r\n\r\ninterface IPayload {\r\n  name: string;\r\n  email: string;\r\n  roles: string[];\r\n}\r\n\r\n@Component({\r\n  selector: 'amb-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.css'],\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n  username = '';\r\n\r\n  constructor(\r\n    @Inject(AuthApplication) private authApplication: AuthApplication,\r\n    private storageApplication: StorageApplication\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    const accessToken = this.storageApplication.getField(\r\n      'accessToken'\r\n    ) as string;\r\n    const payload: IPayload = jwt_decode(accessToken);\r\n    this.username = payload.name;\r\n  }\r\n\r\n  logout() {\r\n    this.authApplication.logout();\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "IPayload-1"
        },
        {
            "name": "MedicRepository",
            "id": "interface-MedicRepository-8060e036852caf8daba4a6d1a8ff322a2f3e15f9dade9af7291d86f652091293609346b6fc1885f1cd6d9a8fd5660b68abec8ecc7ca66c71db54129410fd9e7f",
            "file": "projects/backoffice/src/app/medics/domain/repositories/medic.repository.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\nimport { ResultPage } from '../../../shared/interfaces/result-page.interface';\r\nimport { MedicEntity } from '../entities/medic.entity';\r\n\r\nexport interface MedicRepository {\r\n  getPage(page: number): Observable<ResultPage<MedicEntity>>;\r\n  delete(id: number): Observable<MedicEntity>;\r\n  update(id: number, medic: FormData): Observable<MedicEntity>;\r\n  insert(medic: FormData): Observable<MedicEntity>;\r\n  list(): Observable<MedicEntity[]>;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MedicEntity>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ResultPage<MedicEntity>>",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "medic",
                            "type": "FormData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MedicEntity>",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "medic",
                            "type": "FormData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<MedicEntity[]>",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "medic",
                            "type": "FormData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MedicEntity>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "medic",
                            "type": "FormData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "MetaDataColumn",
            "id": "interface-MetaDataColumn-6325e5261bd5b245e1613c0e5f6def7976dbdb0adaa9049156931fd048356ae692be3ce2793a4ae2b72c5e87c77b26fdd17f4088edc137f1badbff13950c8a31",
            "file": "projects/backoffice/src/app/shared/interfaces/metadatacolumn.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MetaDataColumn {\r\n  field: string;\r\n  header: string;\r\n  sortable: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "sortable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ResultPage",
            "id": "interface-ResultPage-d098134ffdd4b0bbff88f9e84d30992de45c655525dcb003b176313966879390778f199c22b45ecbd3cfedddaa7de0c7a0ffabf5e2a44feb58c427a9a8c7c1c9",
            "file": "projects/backoffice/src/app/shared/interfaces/result-page.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ResultPage<T> {\r\n  records: T[];\r\n  totalRecords: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "records",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "totalRecords",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SocketRepository",
            "id": "interface-SocketRepository-bfc23d00a04833848771991ddd2f3e8e311d57821f856ac5ea2339ba13613010e9c2ca9a56915ae61e536a0754b4ff20e4f3525bc8dd65cbf64716fdff5cdc18",
            "file": "projects/backoffice/src/app/dashboard/domain/repositories/socket.repository.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\nimport { DataCovid } from '../entities/data-covid';\r\n\r\nexport interface SocketRepository {\r\n  listen(eventName: string): Observable<DataCovid[]>;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "listen",
                    "args": [
                        {
                            "name": "eventName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<DataCovid[]>",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "StorageRepository",
            "id": "interface-StorageRepository-517b3b9acf9a5f199a8ae00def7bc666005b1baab80a52fe4cc0fff222d90535c5a4a96790f8a1227f1f3443d1f6af327c7f7753172953ce7b9dd6045f3b7089",
            "file": "projects/backoffice/src/app/core/domain/repositories/storage.repository.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface StorageRepository {\r\n  setStorage(nameProperty: string, value: string): void;\r\n  getStorage(nameProperty: string): string | null;\r\n  clear(): void;\r\n  getFieldInToken(fieldName: string): string | string[];\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFieldInToken",
                    "args": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | []",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStorage",
                    "args": [
                        {
                            "name": "nameProperty",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nameProperty",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setStorage",
                    "args": [
                        {
                            "name": "nameProperty",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nameProperty",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Tokens",
            "id": "interface-Tokens-61076edfb154fcb000a9728cd166d1b6d4121846f9168ca08cd720fba42a020fa4ae062db87f262ec9f1080486689ddfffc9e4afc067846862c1d75f47e1bdde",
            "file": "projects/backoffice/src/app/core/application/tokens.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Tokens {\r\n  accessToken: string;\r\n  refreshToken: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "accessToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "refreshToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthApplication",
            "id": "injectable-AuthApplication-d90e8ef58ee22f959756057d6ffb9ac64f60fbfff317a59bc55c0d45ebfaccc605f4cdaa6808019e10abc118e2ac2eedd927a6c30645b47be6be8f3a6f5a5af5",
            "file": "projects/backoffice/src/app/core/application/auth.application.ts",
            "properties": [
                {
                    "name": "userLogged",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getNewAccessToken",
                    "args": [
                        {
                            "name": "refreshToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Tokens>",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "refreshToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "auth",
                            "type": "AuthEntity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "auth",
                            "type": "AuthEntity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\r\nimport { AuthEntity } from '../domain/entities/auth.entity';\r\nimport { AuthRepository } from '../domain/repositories/auth.repository';\r\nimport { AuthInfrastructure } from '../infrastructure/auth.infrastructure';\r\nimport { Router } from '@angular/router';\r\nimport { Tokens } from './tokens.interface';\r\nimport { StorageInfrastructure } from '../infrastructure/storage.infrastructure';\r\nimport { StorageRepository } from '../domain/repositories/storage.repository';\r\nimport { ILayout } from '../../config/interfaces/layout.interface';\r\nimport { LayoutService } from '../../config/services/layout.service';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class AuthApplication {\r\n  private userLogged = false;\r\n\r\n  constructor(\r\n    @Inject(AuthInfrastructure) private authRepository: AuthRepository,\r\n    @Inject(StorageInfrastructure) private storageRepository: StorageRepository,\r\n    private layoutService: LayoutService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  login(auth: AuthEntity) {\r\n    this.authRepository.login(auth).subscribe((response: Tokens) => {\r\n      this.storageRepository.setStorage('accessToken', response.accessToken);\r\n      this.storageRepository.setStorage('refreshToken', response.refreshToken);\r\n      this.userLogged = true;\r\n      this.router.navigate(['/dashboard']);\r\n      const configLayout: ILayout = { header: true, menu: true };\r\n      //layoutService.settingConfiguration(configLayout);\r\n      this.layoutService.configuration = configLayout;\r\n    });\r\n  }\r\n\r\n  logout() {\r\n    this.storageRepository.clear();\r\n    this.userLogged = false;\r\n    this.router.navigate(['/']);\r\n  }\r\n\r\n  get isAuthenticated(): boolean {\r\n    return (\r\n      this.userLogged || !!this.storageRepository.getStorage('accessToken')\r\n    );\r\n  }\r\n\r\n  getNewAccessToken(refreshToken: string): Observable<Tokens> {\r\n    return this.authRepository.getNewAccessToken(refreshToken);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authRepository",
                        "type": "AuthRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "storageRepository",
                        "type": "StorageRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "layoutService",
                        "type": "LayoutService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "authRepository",
                        "type": "AuthRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storageRepository",
                        "type": "StorageRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "layoutService",
                        "type": "LayoutService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "isAuthenticated": {
                    "name": "isAuthenticated",
                    "getSignature": {
                        "name": "isAuthenticated",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 42
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "AuthInfrastructure",
            "id": "injectable-AuthInfrastructure-f20487f30be48caaf0e3d456a80808d2c4ea728cabd76eea151175c8a3da5534b74b3b072cc20630efc1cfe5cbd520d079088ec37ffbf91d8c99d8d7d0c93105",
            "file": "projects/backoffice/src/app/core/infrastructure/auth.infrastructure.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getNewAccessToken",
                    "args": [
                        {
                            "name": "refreshToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Tokens>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "refreshToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "auth",
                            "type": "AuthEntity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Tokens>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "auth",
                            "type": "AuthEntity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthEntity } from '../domain/entities/auth.entity';\r\nimport { AuthRepository } from '../domain/repositories/auth.repository';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'projects/backoffice/src/environments/environment';\r\nimport { Tokens } from '../application/tokens.interface';\r\n\r\n@Injectable()\r\nexport class AuthInfrastructure implements AuthRepository {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  login(auth: AuthEntity): Observable<Tokens> {\r\n    return this.http.post<Tokens>(`${environment.apiUrl}/users/login`, auth);\r\n  }\r\n\r\n  getNewAccessToken(refreshToken: string): Observable<Tokens> {\r\n    return this.http.get<Tokens>(\r\n      `${environment.apiUrl}/users/refresh/${refreshToken}`\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CovidApplication",
            "id": "injectable-CovidApplication-3f5eb1cf54cd1e2666f9867bbd180670b3f35a8c8e102628294c3b0635145f29bdc0c0be8f5b48433c4994ad4d354fdc78a83e544d318932acaf1665c0fbddbb",
            "file": "projects/backoffice/src/app/dashboard/application/covid.application.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getCovidData",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<CovidModel[]>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { CovidModel } from '../domain/models/covid.model';\r\nimport { CovidRepository } from '../domain/repositories/covid.repository';\r\nimport { CovidInfrastructure } from '../infrastructure/covid.infrastructure';\r\n\r\n@Injectable()\r\nexport class CovidApplication {\r\n  constructor(\r\n    @Inject(CovidInfrastructure) private repository: CovidRepository\r\n  ) {}\r\n\r\n  getCovidData(): Observable<CovidModel[]> {\r\n    return this.repository.getCovidData();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "repository",
                        "type": "CovidRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "repository",
                        "type": "CovidRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CovidInfrastructure",
            "id": "injectable-CovidInfrastructure-ebfa998ee32549c7f2d1c5d1f2129673000d86bc97170d7b6433c84e94ba0554ed4c751035c28b27701b0f2fb9e7fb5174c99ff0a2e4c45b735cbcfd0e2af824",
            "file": "projects/backoffice/src/app/dashboard/infrastructure/covid.infrastructure.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getCovidData",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<CovidModel[]>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { map, Observable } from 'rxjs';\r\nimport { CovidModel } from '../domain/models/covid.model';\r\nimport { CovidRepository } from '../domain/repositories/covid.repository';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from '../../../environments/environment';\r\n\r\n@Injectable()\r\nexport class CovidInfrastructure implements CovidRepository {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getCovidData(): Observable<CovidModel[]> {\r\n    return this.http\r\n      .get<CovidModel[]>(environment.apiCovid)\r\n      .pipe(map((data: CovidModel[]) => data.slice(0, 30)));\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DriverApplication",
            "id": "injectable-DriverApplication-484c10748f3b117a37aeae7ea7c7fb9496d258e1ea28f14e495ab42ad4d216d19fffd26b1c264a6a9fc47c694bdfaa6a3a99b3876c267ed6bca410811c13f767",
            "file": "projects/backoffice/src/app/drivers/application/driver.application.ts",
            "properties": [],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<DriverEntity>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ResultPage<DriverEntity>>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "driver",
                            "type": "DriverEntity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<DriverEntity>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "driver",
                            "type": "DriverEntity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<DriverEntity[]>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "driver",
                            "type": "DriverEntity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<DriverEntity>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "driver",
                            "type": "DriverEntity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { DriverEntity } from '../domain/entities/driver.entity';\r\nimport { DriverInfrastructure } from '../infrastructure/driver.infrastructure';\r\nimport { DriverRepository } from '../domain/repositories/driver.repository';\r\nimport { ResultPage } from '../../shared/interfaces/result-page.interface';\r\n\r\n@Injectable()\r\nexport class DriverApplication {\r\n  constructor(\r\n    @Inject(DriverInfrastructure) private repository: DriverRepository\r\n  ) {}\r\n\r\n  getPage(page: number): Observable<ResultPage<DriverEntity>> {\r\n    return this.repository.getPage(page);\r\n  }\r\n\r\n  delete(id: number): Observable<DriverEntity> {\r\n    return this.repository.delete(id);\r\n  }\r\n\r\n  update(id: number, driver: DriverEntity): Observable<DriverEntity> {\r\n    return this.repository.update(id, driver);\r\n  }\r\n\r\n  insert(driver: DriverEntity): Observable<DriverEntity> {\r\n    return this.repository.insert(driver);\r\n  }\r\n\r\n  list(): Observable<DriverEntity[]> {\r\n    return this.repository.list();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "repository",
                        "type": "DriverRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "repository",
                        "type": "DriverRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DriverInfrastructure",
            "id": "injectable-DriverInfrastructure-9071d29f60600f8166e976ed56c426933dc6df6c9d7d610eaffe0d0e8b68793cc9e6f4e3076807cb7044273ab0f8378669984bbc7f2b389394ea3b353e104841",
            "file": "projects/backoffice/src/app/drivers/infrastructure/driver.infrastructure.ts",
            "properties": [
                {
                    "name": "pathEndpoint",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<DriverEntity>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ResultPage<DriverEntity>>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "driver",
                            "type": "DriverEntity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<DriverEntity>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "driver",
                            "type": "DriverEntity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<DriverEntity[]>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "driver",
                            "type": "DriverEntity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<DriverEntity>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "driver",
                            "type": "DriverEntity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from 'projects/backoffice/src/environments/environment';\r\nimport { Observable } from 'rxjs';\r\nimport { ResultPage } from '../../shared/interfaces/result-page.interface';\r\nimport { DriverEntity } from '../domain/entities/driver.entity';\r\nimport { DriverRepository } from '../domain/repositories/driver.repository';\r\n\r\n@Injectable()\r\nexport class DriverInfrastructure implements DriverRepository {\r\n  private pathEndpoint = '';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getPage(page: number): Observable<ResultPage<DriverEntity>> {\r\n    return this.http.get<ResultPage<DriverEntity>>(\r\n      `${environment.apiUrl}/drivers/page/${page}/${environment.pageSize}`\r\n    );\r\n  }\r\n  delete(id: number): Observable<DriverEntity> {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n  update(id: number, driver: DriverEntity): Observable<DriverEntity> {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n  insert(driver: DriverEntity): Observable<DriverEntity> {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n  list(): Observable<DriverEntity[]> {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "IconService",
            "id": "injectable-IconService-aa65d1965340bf61ac4ce0a5b3cce05ac511601d62001761e59357a97e10fd361ead70480408193e69654e5f9036d4302beb3b9888e1881ecf56ec228c346158",
            "file": "projects/backoffice/src/app/helpers/services/icon.service.ts",
            "properties": [
                {
                    "name": "listIcons",
                    "defaultValue": "[\r\n    { name: 'exportToExcel', path: '../assets/img/icons/excel.svg' },\r\n    { name: 'exportToPdf', path: '../assets/img/icons/pdf.svg' },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIcon[]",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "registryIcons",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { MatIconRegistry } from '@angular/material/icon';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\ninterface IIcon {\r\n  name: string;\r\n  path: string;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class IconService {\r\n  private listIcons: IIcon[] = [\r\n    { name: 'exportToExcel', path: '../assets/img/icons/excel.svg' },\r\n    { name: 'exportToPdf', path: '../assets/img/icons/pdf.svg' },\r\n  ];\r\n\r\n  constructor(\r\n    private matIconRegistry: MatIconRegistry,\r\n    private domSanitizer: DomSanitizer\r\n  ) {\r\n    this.registryIcons();\r\n  }\r\n\r\n  registryIcons() {\r\n    console.log('registry icons');\r\n    this.listIcons.forEach((icon: IIcon) => {\r\n      this.matIconRegistry.addSvgIcon(\r\n        icon.name,\r\n        this.domSanitizer.bypassSecurityTrustResourceUrl(icon.path)\r\n      );\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "matIconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "matIconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "InactivityService",
            "id": "injectable-InactivityService-9e735c4f3b4c4cf643220a5886e985c2644ef38367719b96e3c394486e1da2c78c0a8ded6cef45a377f831e4853dec8533e4f4a600ce97022397f18c124f7b29",
            "file": "projects/backoffice/src/app/config/services/inactivity.service.ts",
            "properties": [
                {
                    "name": "idle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "idleActivity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "idleEvent",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "idleSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "timeout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methods": [
                {
                    "name": "idleObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "lockedSession",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "startWatching",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "stopWatching",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\r\nimport { INACTIVITY_TOKEN } from '../tokens/inactivity.token';\r\nimport { IInactivity } from '../interfaces/inactivity.interface';\r\nimport {\r\n  bufferTime,\r\n  from,\r\n  fromEvent,\r\n  merge,\r\n  Observable,\r\n  Subject,\r\n  Subscription,\r\n} from 'rxjs';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class InactivityService {\r\n  timeout: number;\r\n  idleActivity: Observable<any>;\r\n  idle: Observable<any>;\r\n  idleSubscription!: Subscription;\r\n\r\n  private idleEvent = new Subject<boolean>();\r\n\r\n  constructor(@Inject(INACTIVITY_TOKEN) detectInactivity: IInactivity) {\r\n    this.timeout = detectInactivity.timeout;\r\n\r\n    this.idleActivity = merge(\r\n      fromEvent(window, 'mousemove'),\r\n      fromEvent(window, 'keydown'),\r\n      fromEvent(window, 'resize')\r\n    );\r\n\r\n    this.idle = from(this.idleActivity);\r\n  }\r\n\r\n  startWatching() {\r\n    this.idleEvent.next(false);\r\n\r\n    this.idleSubscription = this.idle\r\n      .pipe(bufferTime(this.timeout))\r\n      .subscribe((response) => {\r\n        if (response.length === 0) {\r\n          console.log('user is idle');\r\n          this.lockedSession();\r\n        }\r\n      });\r\n  }\r\n\r\n  lockedSession() {\r\n    this.idleEvent.next(true);\r\n    this.stopWatching();\r\n  }\r\n\r\n  stopWatching() {\r\n    if (this.idleSubscription) {\r\n      this.idleSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  idleObservable(): Observable<any> {\r\n    return this.idleEvent.asObservable();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "detectInactivity",
                        "type": "IInactivity",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "detectInactivity",
                        "type": "IInactivity",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LayoutService",
            "id": "injectable-LayoutService-2dc939069bcaf8ee5841e352b54073f45446a693a0a189fa4f18edc8b60691456f7f66da0df9dec0bc50a5fd60fa3d524d1818986c5e7a3698fe34dbbe015c56",
            "file": "projects/backoffice/src/app/config/services/layout.service.ts",
            "properties": [
                {
                    "name": "configSubject",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<ILayout>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { ILayout } from '../interfaces/layout.interface';\r\nimport { LAYOUT_TOKEN } from '../tokens/layout.token';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class LayoutService {\r\n  private configSubject: BehaviorSubject<ILayout>;\r\n\r\n  constructor(@Inject(LAYOUT_TOKEN) private config: ILayout) {\r\n    this.configSubject = new BehaviorSubject<ILayout>(this.config);\r\n  }\r\n\r\n  set configuration(value: any) {\r\n    let config = this.configSubject.getValue();\r\n    config = Object.assign(config, value);\r\n    this.configSubject.next(config);\r\n  }\r\n\r\n  get configuration(): any {\r\n    return this.configSubject.asObservable();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ILayout",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ILayout",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "configuration": {
                    "name": "configuration",
                    "setSignature": {
                        "name": "configuration",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 14,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "configuration",
                        "type": "any",
                        "returnType": "any",
                        "line": 20
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "MedicApplication",
            "id": "injectable-MedicApplication-0a308fb2a623960d9d81415142e6508a710e5d85ab9187a29025a5880484c3c29218240c17153ea5d949af467c53b8bbf5919d07052031c5770b04353f70eb50",
            "file": "projects/backoffice/src/app/medics/application/medic.application.ts",
            "properties": [],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MedicEntity>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ResultPage<MedicEntity>>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "medic",
                            "type": "FormData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MedicEntity>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "medic",
                            "type": "FormData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<MedicEntity[]>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "medic",
                            "type": "FormData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MedicEntity>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "medic",
                            "type": "FormData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { MedicEntity } from '../domain/entities/medic.entity';\r\nimport { MedicInfrastructure } from '../infrastructure/medic.infrastructure';\r\nimport { MedicRepository } from '../domain/repositories/medic.repository';\r\nimport { ResultPage } from '../../shared/interfaces/result-page.interface';\r\n\r\n@Injectable()\r\nexport class MedicApplication {\r\n  constructor(\r\n    @Inject(MedicInfrastructure) private repository: MedicRepository\r\n  ) {}\r\n\r\n  getPage(page: number): Observable<ResultPage<MedicEntity>> {\r\n    return this.repository.getPage(page);\r\n  }\r\n\r\n  delete(id: number): Observable<MedicEntity> {\r\n    return this.repository.delete(id);\r\n  }\r\n\r\n  update(id: number, medic: FormData): Observable<MedicEntity> {\r\n    return this.repository.update(id, medic);\r\n  }\r\n\r\n  insert(medic: FormData): Observable<MedicEntity> {\r\n    return this.repository.insert(medic);\r\n  }\r\n\r\n  list(): Observable<MedicEntity[]> {\r\n    return this.repository.list();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "repository",
                        "type": "MedicRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "repository",
                        "type": "MedicRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MedicInfrastructure",
            "id": "injectable-MedicInfrastructure-4f0409271f0ccb447f0da9712cedcfc4de933edbfebc8362e411bd1aadbd139d8efebad13585db6cecc9e2c257bb0b91d1c7692221e2f912d5f713bbe31ae2d7",
            "file": "projects/backoffice/src/app/medics/infrastructure/medic.infrastructure.ts",
            "properties": [
                {
                    "name": "pathEndpoint",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MedicEntity>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ResultPage<MedicEntity>>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "medic",
                            "type": "FormData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MedicEntity>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "medic",
                            "type": "FormData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<MedicEntity[]>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "medic",
                            "type": "FormData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MedicEntity>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "medic",
                            "type": "FormData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from 'projects/backoffice/src/environments/environment';\r\nimport { Observable } from 'rxjs';\r\nimport { ResultPage } from '../../shared/interfaces/result-page.interface';\r\nimport { MedicEntity } from '../domain/entities/medic.entity';\r\nimport { MedicRepository } from '../domain/repositories/medic.repository';\r\n\r\n@Injectable()\r\nexport class MedicInfrastructure implements MedicRepository {\r\n  private pathEndpoint = '';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getPage(page: number): Observable<ResultPage<MedicEntity>> {\r\n    return this.http.get<ResultPage<MedicEntity>>(\r\n      `${environment.apiUrl}/medics/page/${page}/${environment.pageSize}`\r\n    );\r\n  }\r\n  delete(id: number): Observable<MedicEntity> {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n  update(id: number, medic: FormData): Observable<MedicEntity> {\r\n    return this.http.put<MedicEntity>(\r\n      `${environment.apiUrl}/medics/${id}`,\r\n      medic\r\n    );\r\n  }\r\n  insert(medic: FormData): Observable<MedicEntity> {\r\n    return this.http.post<MedicEntity>(`${environment.apiUrl}/medics`, medic);\r\n  }\r\n  list(): Observable<MedicEntity[]> {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SocketApplication",
            "id": "injectable-SocketApplication-9dc67d36321f3f090de1320f9e6ce908b5900d4b4e9f82e4ea2b98ec2117d6762f826730039885118737dec85e022524c1e2457a338d2c596c24319983e96e6d",
            "file": "projects/backoffice/src/app/dashboard/application/socket.application.ts",
            "properties": [],
            "methods": [
                {
                    "name": "listen",
                    "args": [
                        {
                            "name": "eventName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<DataCovid[]>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { DataCovid } from '../domain/entities/data-covid';\r\nimport { SocketRepository } from '../domain/repositories/socket.repository';\r\nimport { SocketInfrastructure } from '../infrastructure/socket.infrastructure';\r\n\r\n@Injectable()\r\nexport class SocketApplication {\r\n  constructor(@Inject(SocketInfrastructure) private socket: SocketRepository) {}\r\n\r\n  listen(eventName: string): Observable<DataCovid[]> {\r\n    return this.socket.listen(eventName);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "socket",
                        "type": "SocketRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "socket",
                        "type": "SocketRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SocketInfrastructure",
            "id": "injectable-SocketInfrastructure-d3e52293c776a1339ba45fe93473ba02c114c2505e6bca5cd7ae9b07aae7132bd076a5d58f25c7e73c5ff5a96d28e8cc0e81c8a3b6fbc5190016e3ad1b519800",
            "file": "projects/backoffice/src/app/dashboard/infrastructure/socket.infrastructure.ts",
            "properties": [
                {
                    "name": "socket",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "listen",
                    "args": [
                        {
                            "name": "eventName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<DataCovid[]>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable, Observer } from 'rxjs';\r\nimport { DataCovid } from '../domain/entities/data-covid';\r\nimport { SocketRepository } from '../domain/repositories/socket.repository';\r\nimport * as io from 'socket.io-client';\r\nimport { environment } from '../../../environments/environment';\r\n\r\n@Injectable()\r\nexport class SocketInfrastructure implements SocketRepository {\r\n  socket: any;\r\n\r\n  constructor() {\r\n    this.socket = io.connect(environment.apiSocket);\r\n  }\r\n\r\n  listen(eventName: string): Observable<DataCovid[]> {\r\n    return new Observable((observer: Observer<DataCovid[]>) => {\r\n      this.socket.on(eventName, (data: DataCovid[]) => observer.next(data));\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "type": "injectable"
        },
        {
            "name": "StorageApplication",
            "id": "injectable-StorageApplication-ff4d6622030d733e59f1fc7ca4cc72eb7a69c2e65d353ec0267c19f496536deabf6ce9e5e223b9d8d1df0733c73c65178c9ed01c51db934d0aac265b7d3d828c",
            "file": "projects/backoffice/src/app/core/application/storage.application.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getField",
                    "args": [
                        {
                            "name": "nameProperty",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nameProperty",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFieldInToken",
                    "args": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | []",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setField",
                    "args": [
                        {
                            "name": "nameProperty",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nameProperty",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\r\nimport { StorageInfrastructure } from '../infrastructure/storage.infrastructure';\r\nimport { StorageRepository } from '../domain/repositories/storage.repository';\r\n\r\n@Injectable()\r\nexport class StorageApplication {\r\n  constructor(\r\n    @Inject(StorageInfrastructure) private storage: StorageRepository\r\n  ) {}\r\n\r\n  getField(nameProperty: string): string | null {\r\n    return this.storage.getStorage(nameProperty);\r\n  }\r\n\r\n  setField(nameProperty: string, value: string): void {\r\n    this.storage.setStorage(nameProperty, value);\r\n  }\r\n\r\n  getFieldInToken(fieldName: string): string | string[] {\r\n    return this.storage.getFieldInToken(fieldName);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storage",
                        "type": "StorageRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "storage",
                        "type": "StorageRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StorageInfrastructure",
            "id": "injectable-StorageInfrastructure-398f54e9c2352119474d120e93c22dbf42fcf4f7a1b987696009c937ddf787095ff75fa191820a7bc6380414584e6cf362f3784f5d6d674eedb8c1143099043a",
            "file": "projects/backoffice/src/app/core/infrastructure/storage.infrastructure.ts",
            "properties": [],
            "methods": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFieldInToken",
                    "args": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | []",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStorage",
                    "args": [
                        {
                            "name": "nameProperty",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nameProperty",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setStorage",
                    "args": [
                        {
                            "name": "nameProperty",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nameProperty",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { StorageRepository } from '../domain/repositories/storage.repository';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\ninterface IPayload {\r\n  name: string;\r\n  email: string;\r\n  roles: string[];\r\n}\r\n\r\n@Injectable()\r\nexport class StorageInfrastructure implements StorageRepository {\r\n  setStorage(nameProperty: string, value: string): void {\r\n    sessionStorage.setItem(nameProperty, value);\r\n  }\r\n  getStorage(nameProperty: string): string | null {\r\n    return sessionStorage.getItem(nameProperty);\r\n  }\r\n  clear(): void {\r\n    sessionStorage.clear();\r\n  }\r\n\r\n  getFieldInToken(field: string): string | string[] {\r\n    const accessToken = this.getStorage('accessToken') as string;\r\n    const payload: any = jwtDecode(accessToken) as IPayload;\r\n\r\n    return payload[field];\r\n  }\r\n}\r\n",
            "type": "injectable"
        },
        {
            "name": "UtilsService",
            "id": "injectable-UtilsService-6015005fab8cc6471bb035ad4a44fe992b12f9e6f20e8aea11a38846fc4fe62c25ca3b4016b2c58f7599a7bb5ddb8619d31b264abb36479228a9f1b916922f41",
            "file": "projects/backoffice/src/app/helpers/services/utils.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "dtoExcel",
                    "args": [
                        {
                            "name": "data",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "metaDataColumns",
                            "type": "MetaDataColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type[]",
                    "typeParameters": [],
                    "line": 217,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "metaDataColumns",
                            "type": "MetaDataColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "exportToExcel",
                    "args": [
                        {
                            "name": "data",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "metaDataColumns",
                            "type": "MetaDataColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sheetTitle",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "additionalInformation",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "metaDataColumns",
                            "type": "MetaDataColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sheetTitle",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "additionalInformation",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "exportToPdf",
                    "args": [
                        {
                            "name": "data",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "metaDataColumns",
                            "type": "MetaDataColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "titleReport",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "metaDataColumns",
                            "type": "MetaDataColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "titleReport",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generatedColumn",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "style",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "style",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generatePDF",
                    "args": [
                        {
                            "name": "dataFormatted",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 212,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "dataFormatted",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateRowData",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "metaDataColumns",
                            "type": "MetaDataColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "metaDataColumns",
                            "type": "MetaDataColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateStyles",
                    "args": [],
                    "optional": false,
                    "returnType": "{ headerLeft: { fontFamily: string; fontSize: number; height: number; color: string; }; subHeaderLeft: { fontFamily: string; fontSize: number; height: number; color: string; }; titleReport: { fontFamily: string; fontSize: number; height: number; color: string; }; }",
                    "typeParameters": [],
                    "line": 189,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "generateTableData",
                    "args": [
                        {
                            "name": "data",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "metaDataColumns",
                            "type": "MetaDataColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ margin: {}; table: { widths: any; body: any; }; }",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "metaDataColumns",
                            "type": "MetaDataColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateTableHeader",
                    "args": [
                        {
                            "name": "data",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dataUrl",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "titleReport",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ margin: {}; table: { widths: {}; body: {}; }; }",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dataUrl",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "titleReport",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showConfirm",
                    "args": [
                        {
                            "name": "messageToShow",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "messageToShow",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showModal",
                    "args": [
                        {
                            "name": "classComponent",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "MatDialogRef<any>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "classComponent",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { ConfirmComponent } from '../../shared/components/confirm/confirm.component';\r\nimport { MetaDataColumn } from '../../shared/interfaces/metadatacolumn.interface';\r\nimport * as XLSX from 'xlsx';\r\n\r\ndeclare var require: any;\r\n\r\nconst pdfMake = require('pdfmake/build/pdfmake.js');\r\nconst pdfFonts = require('pdfmake/build/vfs_fonts.js');\r\npdfMake.vfs = pdfFonts.pdfMake.vfs;\r\n\r\n@Injectable()\r\nexport class UtilsService {\r\n  constructor(private dialog: MatDialog) {}\r\n\r\n  showConfirm(messageToShow: string = '') {\r\n    const reference = this.dialog.open(ConfirmComponent, {\r\n      width: '340px',\r\n      disableClose: true,\r\n    });\r\n\r\n    if (messageToShow) {\r\n      reference.componentInstance.messageToShow = messageToShow;\r\n    }\r\n\r\n    return reference.afterClosed();\r\n  }\r\n\r\n  showModal(\r\n    classComponent: any,\r\n    options: { [s: string]: string | boolean | number | object }\r\n  ): MatDialogRef<any> {\r\n    return this.dialog.open(classComponent, options);\r\n  }\r\n\r\n  exportToExcel(\r\n    data: any[],\r\n    metaDataColumns: MetaDataColumn[],\r\n    fileName: string,\r\n    sheetTitle: string,\r\n    additionalInformation: { [s: string]: string }\r\n  ) {\r\n    const result = this.dtoExcel(data, metaDataColumns);\r\n    // result.unshift(additionalInformation);\r\n    console.log(result);\r\n    const ws: XLSX.WorkSheet = XLSX.utils.json_to_sheet([\r\n      additionalInformation,\r\n    ]);\r\n    XLSX.utils.sheet_add_json(ws, result, { origin: 'A3' });\r\n    const wb: XLSX.WorkBook = XLSX.utils.book_new();\r\n\r\n    XLSX.utils.book_append_sheet(wb, ws, sheetTitle.toUpperCase());\r\n    XLSX.writeFile(wb, fileName + '.xlsx');\r\n  }\r\n\r\n  async exportToPdf(\r\n    data: any[],\r\n    metaDataColumns: MetaDataColumn[],\r\n    fileName: string,\r\n    titleReport: string\r\n  ) {\r\n    const blob = await fetch('/assets/img/logos/logo.jpg').then((r) =>\r\n      r.blob()\r\n    );\r\n    const dataUrl = await new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onload = () => resolve(reader.result);\r\n      reader.readAsDataURL(blob);\r\n    });\r\n\r\n    const dataFormatted = {\r\n      pageSize: 'A4',\r\n      pageOrientation: 'portrait',\r\n      pageMargins: [20, 20, 20, 20],\r\n      content: [\r\n        this.generateTableHeader(data, dataUrl, titleReport.toUpperCase()),\r\n        this.generateTableData(data, metaDataColumns),\r\n      ],\r\n      styles: this.generateStyles(),\r\n    };\r\n\r\n    this.generatePDF(dataFormatted, fileName);\r\n  }\r\n\r\n  private generateTableHeader(data: any[], dataUrl: any, titleReport: string) {\r\n    return {\r\n      margin: [0, 0, 0, 15],\r\n      table: {\r\n        widths: [120, 'auto', 50, 'auto'],\r\n        body: [\r\n          [\r\n            {\r\n              borderWidth: ['1px', '1px', '1px', '1px'],\r\n              borderColor: ['#000', '#000', '#000', '#000'],\r\n              border: [false, false, true, false],\r\n              width: 100,\r\n              image: dataUrl,\r\n            },\r\n            {\r\n              border: [false, false, false, false],\r\n              text: [\r\n                this.generatedColumn('Chanel Company\\n', 'headerLeft'),\r\n                this.generatedColumn(\r\n                  'Av. de la República, N° 5\\n',\r\n                  'subHeaderLeft'\r\n                ),\r\n                this.generatedColumn(\r\n                  'San Isidro, Lima Perú\\n',\r\n                  'subHeaderLeft'\r\n                ),\r\n                this.generatedColumn(\r\n                  'Tel: (591) 2-2222-2222\\n',\r\n                  'subHeaderLeft'\r\n                ),\r\n                this.generatedColumn('info@chanel.com\\n', 'subHeaderLeft'),\r\n                this.generatedColumn('www.chanel.com\\n', 'subHeaderLeft'),\r\n              ],\r\n            },\r\n            {\r\n              border: [false, false, false, false],\r\n              text: '',\r\n            },\r\n            {\r\n              border: [false, false, false, false],\r\n              text: titleReport,\r\n              style: 'titleReport',\r\n            },\r\n          ],\r\n        ],\r\n      },\r\n    };\r\n  }\r\n\r\n  private generateTableData(data: any[], metaDataColumns: MetaDataColumn[]) {\r\n    const body = data.map((el: any) =>\r\n      Object.keys(el).map((prop: string) =>\r\n        this.generateRowData(el, metaDataColumns, prop)\r\n      )\r\n    );\r\n\r\n    console.log(body);\r\n\r\n    const length = Object.keys(data[0]).length;\r\n    const widths = Array.from(Array(10).keys()).map(\r\n      (el) => Math.floor(100 / length) + '%'\r\n    );\r\n\r\n    return {\r\n      margin: [0, 0, 0, 15],\r\n      table: {\r\n        widths,\r\n        body,\r\n      },\r\n    };\r\n  }\r\n\r\n  private generateRowData(\r\n    data: any,\r\n    metaDataColumns: MetaDataColumn[],\r\n    key: string\r\n  ) {\r\n    const column = metaDataColumns.find(\r\n      (el: MetaDataColumn) => el.field === key\r\n    );\r\n    if (column) {\r\n      return [\r\n        {\r\n          border: [false, false, true, false],\r\n          borderWidth: ['1px', '1px', '1px', '1px'],\r\n          borderColor: ['#000', '#000', '#000', '#000'],\r\n          text: data[key],\r\n        },\r\n      ];\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  private generatedColumn(text: string, style: any = null) {\r\n    const column: any = { text };\r\n    if (style) {\r\n      column.style = style;\r\n    }\r\n\r\n    return column;\r\n  }\r\n\r\n  private generateStyles() {\r\n    return {\r\n      headerLeft: {\r\n        fontFamily: 'Verdana',\r\n        fontSize: 13,\r\n        height: 16,\r\n        color: '#3c3b40',\r\n      },\r\n      subHeaderLeft: {\r\n        fontFamily: 'Verdana',\r\n        fontSize: 10,\r\n        height: 16,\r\n        color: '#3c3b40',\r\n      },\r\n      titleReport: {\r\n        fontFamily: 'Verdana',\r\n        fontSize: 15,\r\n        height: 16,\r\n        color: '#3c3b40',\r\n      },\r\n    };\r\n  }\r\n\r\n  private generatePDF(dataFormatted: any, fileName: string) {\r\n    const docGenerated = pdfMake.createPdf(dataFormatted);\r\n    docGenerated.download(fileName + '.pdf');\r\n  }\r\n\r\n  private dtoExcel(\r\n    data: any[],\r\n    metaDataColumns: MetaDataColumn[]\r\n  ): { [s: string]: string }[] {\r\n    return data.map((item: any) => {\r\n      const newElement: { [s: string]: string } = {};\r\n      for (const prop in item) {\r\n        const metaData = metaDataColumns.find((el) => el.field === prop);\r\n        if (metaData) {\r\n          newElement[metaData.header] = item[prop];\r\n        }\r\n      }\r\n\r\n      return newElement;\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthenticationGuard",
            "id": "injectable-AuthenticationGuard-ee53cba6afa7b94269e6e16a4b02b302347146258ebb95ad2df850ea10a066844e14e6055ee4b402746061ae7eaac4ea38863dcfa94e331edd9a7165af016489",
            "file": "projects/backoffice/src/app/shared/guards/authentication.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "canLoad",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validateAuthentication",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\r\nimport {\r\n  ActivatedRouteSnapshot,\r\n  CanActivate,\r\n  CanLoad,\r\n  Route,\r\n  Router,\r\n  RouterStateSnapshot,\r\n  UrlSegment,\r\n  UrlTree,\r\n} from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthApplication } from '../../core/application/auth.application';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthenticationGuard implements CanActivate, CanLoad {\r\n  constructor(\r\n    @Inject(AuthApplication) private auth: AuthApplication,\r\n    private router: Router\r\n  ) {}\r\n\r\n  canActivate(): boolean {\r\n    return this.validateAuthentication();\r\n  }\r\n\r\n  canLoad(): boolean {\r\n    return this.validateAuthentication();\r\n  }\r\n\r\n  validateAuthentication() {\r\n    const isUserLogged = this.auth.isAuthenticated;\r\n\r\n    if (!isUserLogged) {\r\n      this.router.navigate(['/']);\r\n    }\r\n\r\n    return isUserLogged;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "TokenInterceptor",
            "id": "injectable-TokenInterceptor-5b8da4d9966394d6abe22fa7530e18d74ddbcfa2ba45b134b0e67cd5adea5e16552e8ce350a07170725dfb60f29400f11131d2311f1a3cc7f2cd2908b67a39f4",
            "file": "projects/backoffice/src/app/shared/interceptors/token.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  HttpErrorResponse,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n} from '@angular/common/http';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { catchError, mergeMap, retry, throwError } from 'rxjs';\r\nimport { AuthApplication } from '../../core/application/auth.application';\r\nimport { StorageApplication } from '../../core/application/storage.application';\r\nimport { Tokens } from '../../core/application/tokens.interface';\r\n\r\n@Injectable()\r\nexport class TokenInterceptor implements HttpInterceptor {\r\n  constructor(\r\n    private storageApplication: StorageApplication,\r\n    private injector: Injector\r\n  ) {}\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\r\n    if (req.url.toLowerCase().includes('/users/login')) {\r\n      return next.handle(req);\r\n    }\r\n\r\n    const authApplication: AuthApplication = this.injector.get(AuthApplication);\r\n\r\n    const accessToken = this.storageApplication.getField('accessToken');\r\n    const requestCloned = req.clone({\r\n      headers: req.headers.append('Authorization', `Bearer ${accessToken}`),\r\n    });\r\n\r\n    return next.handle(requestCloned).pipe(\r\n      catchError((error: HttpErrorResponse) => {\r\n        let errorMessage = '';\r\n\r\n        if (error.error instanceof ErrorEvent) {\r\n          console.log('Error en el frontend');\r\n          errorMessage = `Error: ${error.error.message}`;\r\n        } else {\r\n          console.log('Error en el backend');\r\n          errorMessage = `Error: ${\r\n            error.error.name ? error.error.name : error.message\r\n          }`;\r\n\r\n          if (error.status === 409) {\r\n            console.log('Token expired');\r\n            const refreshToken = this.storageApplication.getField(\r\n              'refreshToken'\r\n            ) as string;\r\n\r\n            return authApplication.getNewAccessToken(refreshToken).pipe(\r\n              retry(3),\r\n              mergeMap((response: Tokens) => {\r\n                this.storageApplication.setField(\r\n                  'accessToken',\r\n                  response.accessToken\r\n                );\r\n\r\n                const requestCloned = req.clone({\r\n                  headers: req.headers.append(\r\n                    'Authorization',\r\n                    `Bearer ${response.accessToken}`\r\n                  ),\r\n                });\r\n\r\n                return next.handle(requestCloned);\r\n              })\r\n            );\r\n          } else if (error.status === 401) {\r\n            console.log('Token modified');\r\n            authApplication.logout();\r\n          }\r\n        }\r\n\r\n        return throwError(() => new Error(errorMessage));\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storageApplication",
                        "type": "StorageApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "storageApplication",
                        "type": "StorageApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "AuthEntity",
            "id": "class-AuthEntity-ce33c2fb95de62f5a7a0b90a4244d360677180f4096f2459251b859d1d8fe50e40f94ed38dcb6181ac0e85b7ae3d7a3b471e04c20bf30c719558cad3d34819e6",
            "file": "projects/backoffice/src/app/core/domain/entities/auth.entity.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class AuthEntity {\r\n  correo: string;\r\n  password: string;\r\n  recaptchaReactive: string;\r\n\r\n  constructor(correo: string, password: string, recaptchaReactive: string) {\r\n    this.correo = correo;\r\n    this.password = password;\r\n    this.recaptchaReactive = recaptchaReactive;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "correo",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "password",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "recaptchaReactive",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "correo",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "password",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "recaptchaReactive",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "correo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "recaptchaReactive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Authorizations",
            "id": "class-Authorizations-7b7346ba3dd84e0e0f159d3f392b84a8615aca3fae51fec1ec6c2361cac3b25cb93464848d0e364dd865bfb430b8429edb4bf1cb081575a6e3f06de37e69254a",
            "file": "projects/backoffice/src/app/shared/classes/authorizations.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Authorizations {\r\n  public EDIT_MEDIC = ['AUDITOR', 'ADMIN'];\r\n\r\n  getPropertyValue(property: string): string[] {\r\n    return this.EDIT_MEDIC;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "EDIT_MEDIC",
                    "defaultValue": "['AUDITOR', 'ADMIN']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getPropertyValue",
                    "args": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BaseComponent",
            "id": "class-BaseComponent-f319f2f93e3e3794e77c90513c14f9fbe61ad25f28e5b65be65ee675a58f559861e8d1c6d3d34f04305a60e7a8bc1aacf0373048d2973c37fb9cd1c3361000c3",
            "file": "projects/backoffice/src/app/shared/classes/base-component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { UtilsService } from '../../helpers/services/utils.service';\r\nimport { MetaDataColumn } from '../interfaces/metadatacolumn.interface';\r\nexport abstract class BaseComponent {\r\n  abstract data: any;\r\n  abstract metaDataColumns: MetaDataColumn[];\r\n  abstract titleSheetExportToExcel: string;\r\n  abstract fileNameExportToExcel: string;\r\n  abstract additionalInformationExcel: { [s: string]: string };\r\n\r\n  constructor(protected utilsService: UtilsService) {}\r\n\r\n  delete(row: any) {\r\n    const response = this.utilsService.showConfirm('Delete it? are you sure?');\r\n\r\n    response.subscribe((result) => {\r\n      if (!result) {\r\n        return;\r\n      }\r\n\r\n      if (result === 'yes') {\r\n        const position = this.data.findIndex((item: any) => item.id === row.id);\r\n        const elements = [...this.data];\r\n        elements.splice(position, 1);\r\n        this.data = elements;\r\n      }\r\n    });\r\n  }\r\n\r\n  exportToExcel() {\r\n    this.utilsService.exportToExcel(\r\n      this.data,\r\n      this.metaDataColumns,\r\n      this.fileNameExportToExcel,\r\n      this.titleSheetExportToExcel,\r\n      this.additionalInformationExcel\r\n    );\r\n  }\r\n\r\n  exportToPdf() {\r\n    this.utilsService.exportToPdf(\r\n      this.data,\r\n      this.metaDataColumns,\r\n      this.fileNameExportToExcel,\r\n      this.titleSheetExportToExcel\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "additionalInformationExcel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "fileNameExportToExcel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "metaDataColumns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaDataColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "titleSheetExportToExcel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "exportToExcel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "exportToPdf",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BookItem",
            "id": "class-BookItem-93378b09f8d9ec5aed2e64dbc19d58ae43e1197017a5577c8ae61b638b28cc336704d742c697e4705532db60ab63626fbb4ec85c6f10cc64120edc027c1b2d28",
            "file": "projects/backoffice/src/app/book/domain/book.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Title } from './vo/title';\r\n/* interface Book {\r\n  title: string;\r\n  author: string;\r\n}\r\n */\r\n//type Books = Book[];\r\n\r\nexport class BookItem {\r\n  title: Title;\r\n  author: string;\r\n\r\n  constructor(title: Title, author: string) {\r\n    this.title = title;\r\n    this.author = author;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "title",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "author",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "title",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "author",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "author",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Title",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DriverEntity",
            "id": "class-DriverEntity-30da3694bd2c9bc179cccc68b651399284c62a8fe8752fba9fcc9da8950a1dcf99ed33740aaa6eb306e986e5090bf5f2411b0dc32686dd4d1b32dffa6e54310e",
            "file": "projects/backoffice/src/app/drivers/domain/entities/driver.entity.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export type DriverPropertiesOptional = Partial<{\r\n  readonly id: number;\r\n}>;\r\n\r\nexport type DriverPropertiesRequired = Required<{\r\n  readonly nombre: string;\r\n}>;\r\n\r\nexport type DriverProperties = DriverPropertiesRequired &\r\n  Required<DriverPropertiesOptional>;\r\n\r\nexport class DriverEntity {\r\n  private readonly id: number | null = null;\r\n  private nombre: string = '';\r\n\r\n  constructor(properties: DriverPropertiesOptional & DriverPropertiesRequired) {\r\n    Object.assign(this, properties);\r\n  }\r\n\r\n  get properties(): DriverProperties {\r\n    return {\r\n      id: this.id as number,\r\n      nombre: this.nombre,\r\n    };\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "properties",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "properties",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "id",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "nombre",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "accessors": {
                "properties": {
                    "name": "properties",
                    "getSignature": {
                        "name": "properties",
                        "type": "",
                        "returnType": "DriverProperties",
                        "line": 20
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MedicEntity",
            "id": "class-MedicEntity-129d101514571a7cd3195b135a0bcb38736502ccea383bb45363485f90aaca01e51ab78be48732da554bd55a5797acae09880f711bd3a206de32be7f6de7be09",
            "file": "projects/backoffice/src/app/medics/domain/entities/medic.entity.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export type MedicPropertiesOptional = Partial<{\r\n  readonly id: number;\r\n  readonly activo: boolean;\r\n}>;\r\n\r\nexport type MedicPropertiesRequired = Required<{\r\n  readonly nombre: string;\r\n  readonly apellido: string;\r\n  readonly segundo_nombre: string;\r\n  readonly cmp: string;\r\n  readonly correo: string;\r\n  readonly dni: string;\r\n  readonly foto: string;\r\n}>;\r\n\r\nexport type MedicProperties = MedicPropertiesRequired &\r\n  Required<MedicPropertiesOptional>;\r\n\r\nexport class MedicEntity {\r\n  private readonly id: number | null = null;\r\n  private nombre: string = '';\r\n  private apellido: string = '';\r\n  private segundo_nombre: string = '';\r\n  private cmp: string = '';\r\n  private correo: string = '';\r\n  private dni: string = '';\r\n  private foto: string = '';\r\n  private activo: boolean = false;\r\n\r\n  constructor(properties: MedicPropertiesOptional & MedicPropertiesRequired) {\r\n    Object.assign(this, properties);\r\n  }\r\n\r\n  get properties(): MedicProperties {\r\n    return {\r\n      id: this.id as number,\r\n      nombre: this.nombre,\r\n      apellido: this.apellido,\r\n      segundo_nombre: this.segundo_nombre,\r\n      cmp: this.cmp,\r\n      correo: this.correo,\r\n      dni: this.dni,\r\n      foto: this.foto,\r\n      activo: this.activo,\r\n    };\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "properties",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "properties",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "activo",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "apellido",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "cmp",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "correo",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "dni",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "foto",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "id",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "nombre",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "segundo_nombre",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "accessors": {
                "properties": {
                    "name": "properties",
                    "getSignature": {
                        "name": "properties",
                        "type": "",
                        "returnType": "MedicProperties",
                        "line": 34
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Paginator",
            "id": "class-Paginator-d0c3b58c53daddde7d50da500c37425942288012a6956f7587062da52716296bda389f849db36134c7c9d48260cc2cd8e86a96ba657f11885105459edbdc12ed",
            "file": "projects/backoffice/src/app/shared/classes/paginator.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { MatPaginatorIntl } from '@angular/material/paginator';\r\n\r\nexport class Paginator extends MatPaginatorIntl {\r\n  override itemsPerPageLabel = 'Items por página';\r\n  override nextPageLabel = 'Siguiente página';\r\n  override previousPageLabel = 'Página anterior';\r\n  override firstPageLabel = 'Primera página';\r\n  override lastPageLabel = 'Última página';\r\n\r\n  override getRangeLabel = (\r\n    page: number,\r\n    pageSize: number,\r\n    length: number\r\n  ): string => {\r\n    if (length == 0 || pageSize == 0) {\r\n      return `0 de ${length}`;\r\n    }\r\n\r\n    length = Math.max(length, 0);\r\n    const startIndex = page * pageSize;\r\n    const endIndex =\r\n      startIndex < length\r\n        ? Math.min(startIndex + pageSize, length)\r\n        : startIndex + pageSize;\r\n\r\n    return `Rango: ${startIndex + 1} - ${endIndex} Total: ${length}`;\r\n  };\r\n}\r\n",
            "properties": [
                {
                    "name": "firstPageLabel",
                    "defaultValue": "'Primera página'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        158
                    ]
                },
                {
                    "name": "getRangeLabel",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        158
                    ]
                },
                {
                    "name": "itemsPerPageLabel",
                    "defaultValue": "'Items por página'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        158
                    ]
                },
                {
                    "name": "lastPageLabel",
                    "defaultValue": "'Última página'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        158
                    ]
                },
                {
                    "name": "nextPageLabel",
                    "defaultValue": "'Siguiente página'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        158
                    ]
                },
                {
                    "name": "previousPageLabel",
                    "defaultValue": "'Página anterior'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        158
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "MatPaginatorIntl",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Title",
            "id": "class-Title-c87f5d14f1a6d6a71294d2f80d2e67e980d4ae28ef4bc9122f81ca220b75c0552776701ef956124a2f3bbc0cb3cf36af17224d7660705e585d3337ed6052b5a1",
            "file": "projects/backoffice/src/app/book/domain/vo/title.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Title {\r\n  private title: string;\r\n\r\n  constructor(title: string) {\r\n    this.validateTitle(title);\r\n    this.title = title;\r\n  }\r\n\r\n  validateTitle(title: string) {\r\n    if (title.length < 15) {\r\n      throw new Error('Title must be at least 15 characters long');\r\n    }\r\n  }\r\n\r\n  get value() {\r\n    return this.title;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "title",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 2,
                "jsdoctags": [
                    {
                        "name": "title",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "validateTitle",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "value": {
                    "name": "value",
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 15
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "User",
            "id": "class-User-cdffdf81e4422e9de0267b75e77a6fc57051c348e149732f44f6d24b3f178726820f4a65c2b8f8db2bb226bfb9a68b4ac8eba3a41870f59cea91938c75c4d5ab",
            "file": "projects/backoffice/src/app/padre/padre.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n/* export interface User {\r\n  id: number;\r\n  name: string;\r\n  age: number;\r\n  lastname: string;\r\n} */\r\n\r\nexport class User {\r\n  name: string;\r\n  age: number;\r\n\r\n  constructor(name2: string, age2: number) {\r\n    this.ageAllowed(age2);\r\n    this.name = name2;\r\n    this.age = age2;\r\n  }\r\n\r\n  ageAllowed(age: number) {\r\n    if (age < 18) {\r\n      throw new Error('Age min is 18');\r\n    }\r\n  }\r\n}\r\n\r\nexport type TUser = User[]; // Array<User>\r\n\r\n@Component({\r\n  selector: 'amb-padre',\r\n  templateUrl: './padre.component.html',\r\n  styleUrls: ['./padre.component.css'],\r\n})\r\nexport class PadreComponent implements OnInit {\r\n  currentDate = new Date();\r\n\r\n  users: TUser = [\r\n    new User('Sergio', 40),\r\n    new User('Juan', 30),\r\n    new User('Pedro', 20),\r\n    new User('Santiago', 40),\r\n  ];\r\n\r\n  constructor() {\r\n    setInterval(() => (this.currentDate = new Date()), 1000);\r\n    setTimeout(() => this.users.pop(), 6000);\r\n  }\r\n\r\n  showAlert(msg: User) {\r\n    alert(JSON.stringify(msg));\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name2",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "age2",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "name2",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "age2",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "age",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [
                {
                    "name": "ageAllowed",
                    "args": [
                        {
                            "name": "age",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "age",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ValidatorsCustom",
            "id": "class-ValidatorsCustom-c6d77989accc22c0dcfe842b04d6ee4e2fd60c01a8d1d47d758ce624f708d0dbdd5eedc6bdea1aebe5b1c10eb5730e22a3ec6a5a224dc275efb754a2ba05e7dd",
            "file": "projects/backoffice/src/app/shared/helpers/validators.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { FormControl } from '@angular/forms';\r\n\r\nexport default class ValidatorsCustom {\r\n  static validateEmailCompany(control: FormControl) {\r\n    if (!control.value) {\r\n      return null;\r\n    }\r\n\r\n    if (control.value.trim().toLowerCase().indexOf('@correo.com') !== -1) {\r\n      return null;\r\n    }\r\n\r\n    return { emailNotAllowed: true };\r\n  }\r\n\r\n  static validateEmailCompanyCustom(emailsDomainAllowed: string[]) {\r\n    return (control: FormControl) => {\r\n      if (!control.value) {\r\n        return null;\r\n      }\r\n\r\n      const isUsingDomainAllowed = emailsDomainAllowed.some(\r\n        (emailDomainAllowed: string) =>\r\n          control.value.trim().toLowerCase().endsWith(emailDomainAllowed)\r\n      );\r\n\r\n      return isUsingDomainAllowed ? null : { emailNotAllowed: true };\r\n    };\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "validateEmailCompany",
                    "args": [
                        {
                            "name": "control",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ emailNotAllowed: boolean; }",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateEmailCompanyCustom",
                    "args": [
                        {
                            "name": "emailsDomainAllowed",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "(control: FormControl) => { emailNotAllowed: boolean; }",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "emailsDomainAllowed",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "RolesAllowedDirective",
            "id": "directive-RolesAllowedDirective-dbda1148a997447aba98534fed9c8a640ea54a901b3645f8c4c28e42e31f9c0a42180c559ae5aba12306f41f30384d2820a66c6785716035d30032614df26143",
            "file": "projects/backoffice/src/app/shared/directives/roles-allowed.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { AuthApplication } from '../../core/application/auth.application';\r\nimport { StorageApplication } from '../../core/application/storage.application';\r\nimport { Authorizations } from '../classes/authorizations';\r\n\r\n@Directive({\r\n  selector: '[roles-allowed]',\r\n})\r\nexport class RolesAllowedDirective {\r\n  @Input('roles-allowed') dirAuthorization: string = '';\r\n  rolesAllowed: string[] = [];\r\n  hashView = false;\r\n\r\n  constructor(\r\n    private templateRef: TemplateRef<any>,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private authApplication: AuthApplication,\r\n    private storageAppication: StorageApplication\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    const authorizations = new Authorizations();\r\n    this.rolesAllowed = authorizations.getPropertyValue(this.dirAuthorization);\r\n\r\n    this.execute();\r\n  }\r\n\r\n  execute() {\r\n    const isUserLogged = this.authApplication.isAuthenticated;\r\n    const rolesUser = this.storageAppication.getFieldInToken(\r\n      'roles'\r\n    ) as string[];\r\n\r\n    const isUserAuthorized = rolesUser.some((role) =>\r\n      this.rolesAllowed.includes(role)\r\n    );\r\n\r\n    if (isUserLogged && isUserAuthorized && !this.hashView) {\r\n      this.viewContainerRef.createEmbeddedView(this.templateRef);\r\n      this.hashView = true;\r\n    } else {\r\n      this.viewContainerRef.clear();\r\n      this.hashView = false;\r\n    }\r\n  }\r\n}\r\n",
            "selector": "[roles-allowed]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "roles-allowed",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "hashView",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "rolesAllowed",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "execute",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authApplication",
                        "type": "AuthApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "storageAppication",
                        "type": "StorageApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authApplication",
                        "type": "AuthApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storageAppication",
                        "type": "StorageApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "UploadDirective",
            "id": "directive-UploadDirective-f41d7dd8931d8d43be59dd2fcf59ee69575e3589a378c49aa8ab35b68c7064d57ab6af4d5ed366408fa4cc09747553129b6aa3b740f7d079fbc2b9cb82cfe0d4",
            "file": "projects/backoffice/src/app/shared/directives/upload.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, EventEmitter, HostListener, Output } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[upload]',\r\n})\r\nexport class UploadDirective {\r\n  @Output() onHover: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n  @Output() onFileDropped: EventEmitter<File> = new EventEmitter<File>();\r\n\r\n  @HostListener('dragover', ['$event']) onDragOver(event: any) {\r\n    event.preventDefault();\r\n    this.onHover.emit(true);\r\n  }\r\n\r\n  @HostListener('dragleave', ['$event']) onDragLeave(event: any) {\r\n    event.preventDefault();\r\n    this.onHover.emit(false);\r\n  }\r\n\r\n  @HostListener('drop', ['$event']) onDrop(event: any) {\r\n    event.preventDefault();\r\n    this.onHover.emit(false);\r\n\r\n    const files = event.dataTransfer.files;\r\n    const fileSelected: File = files[0];\r\n\r\n    this.onFileDropped.emit(fileSelected);\r\n  }\r\n}\r\n",
            "selector": "[upload]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "onFileDropped",
                    "defaultValue": "new EventEmitter<File>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "EventEmitter<File>"
                },
                {
                    "name": "onHover",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "dragleave",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15
                },
                {
                    "name": "dragover",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10
                },
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onDragLeave",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragleave', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDragOver",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragover', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDrop",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'drop', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-8ac2388b2a16058a66bc5f73a441bedd13a77ae2ceff0a1fd64e90f41646b2333e715cca066cd7728cd4e9b2b28220255ee9fb8e0580cc610e70dace17128f57",
            "file": "projects/backoffice/src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configLayout",
                    "defaultValue": "LAYOUT_CONSTANTS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILayout",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "currentDate",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "openSideNav",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "startApp",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "timeoutExceeded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { NavigationEnd, Router } from '@angular/router';\r\nimport { BookItem } from './book/domain/book';\r\nimport { Title } from './book/domain/vo/title';\r\nimport { LAYOUT_CONSTANTS } from './config/constants/layout.constant';\r\nimport { ILayout } from './config/interfaces/layout.interface';\r\nimport { InactivityService } from './config/services/inactivity.service';\r\nimport { LayoutService } from './config/services/layout.service';\r\n\r\n@Component({\r\n  selector: 'amb-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css'],\r\n})\r\nexport class AppComponent {\r\n  openSideNav = true;\r\n  currentDate = new Date();\r\n  configLayout: ILayout = LAYOUT_CONSTANTS;\r\n  startApp = false;\r\n  timeoutExceeded = false;\r\n\r\n  constructor(\r\n    private layoutService: LayoutService,\r\n    private inactivityService: InactivityService,\r\n    private router: Router\r\n  ) {\r\n    //layoutService.gettingConfiguration().subscribe((config) => {\r\n    layoutService.configuration.subscribe((config: ILayout) => {\r\n      this.configLayout = config; // {header: false, menu: false}\r\n    });\r\n\r\n    this.router.events.subscribe((event) => {\r\n      if (event instanceof NavigationEnd) {\r\n        if (event.urlAfterRedirects !== '/' && !this.startApp) {\r\n          this.startApp = true;\r\n          this.inactivityService.startWatching();\r\n        }\r\n      }\r\n    });\r\n\r\n    this.inactivityService.idleObservable().subscribe((status) => {\r\n      this.timeoutExceeded = status;\r\n      console.log('timeout exceeded: ', status);\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-sidenav-container,\r\nmat-sidenav-content,\r\nmat-sidenav {\r\n  height: 100%;\r\n}\r\n\r\nmat-sidenav {\r\n  /*   max-width: 280px;\r\n  min-width: 60px; */\r\n  width: 280px;\r\n  background-color: rgb(15, 23, 42);\r\n}\r\n\r\n.logo {\r\n  padding: 20px 24px;\r\n  color: white;\r\n  font-size: 20px;\r\n  font-weight: 300;\r\n  height: 140px;\r\n  width: auto;\r\n}\r\n",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "layoutService",
                        "type": "LayoutService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "inactivityService",
                        "type": "InactivityService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "layoutService",
                        "type": "LayoutService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "inactivityService",
                        "type": "InactivityService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<mat-sidenav-container>\r\n  <mat-sidenav [opened]=\"openSideNav\" mode=\"side\" *ngIf=\"configLayout.menu\">\r\n    <div class=\"logo\"></div>\r\n\r\n    <amb-menu></amb-menu>\r\n  </mat-sidenav>\r\n  <mat-sidenav-content>\r\n    <amb-header *ngIf=\"configLayout.header\"></amb-header>\r\n    <router-outlet></router-outlet>\r\n  </mat-sidenav-content>\r\n</mat-sidenav-container>\r\n<ng-template [ngIf]=\"timeoutExceeded\">\r\n  <amb-page-lock-screen></amb-page-lock-screen>\r\n</ng-template>\r\n"
        },
        {
            "name": "BookComponent",
            "id": "component-BookComponent-9263a79ff816ccb3fbabd42d90d857f113f018ec1ca9fbf2c9cb7be4210f17deee7bb0f4a8ff4852c5f37adf969edec2d00107e9abc073281311bf6c051b9560",
            "file": "projects/backoffice/src/app/book/book.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-book",
            "styleUrls": [
                "./book.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./book.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "authorBook",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "idBook",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "titleBook",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onDeleteBook",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "delete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { BookItem } from './domain/book';\r\nimport { Title } from './domain/vo/title';\r\n\r\n@Component({\r\n  selector: 'amb-book',\r\n  templateUrl: './book.component.html',\r\n  styleUrls: ['./book.component.css'],\r\n})\r\nexport class BookComponent implements OnInit {\r\n  @Input('titleBook') title!: string;\r\n  @Input('authorBook') author!: string;\r\n  @Input() idBook = 0;\r\n\r\n  //@Output() onDeleteBook: EventEmitter<number> = new EventEmitter<number>();\r\n  @Output() onDeleteBook = new EventEmitter<number>();\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  delete() {\r\n    /*     console.log('method deleted called from BookComponent');\r\n    const title = new Title(this.title);\r\n    this.onDeleteBook.emit(new BookItem(title, this.author)); */\r\n    this.onDeleteBook.emit(this.idBook);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./book.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1>{{ title }}</h1>\r\n<p>Autor: {{ author }}</p>\r\n<button (click)=\"delete()\">Delete</button>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4ef205c97a334c309aa4001c8ab4a6d9571dcae18d0e85aaf0d367467ab5d3a9f13ab3573726f1fcb409bc9b49894dadfb80b1bbe1b6ba7041455ad9d4922004",
            "file": "stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ConfirmComponent",
            "id": "component-ConfirmComponent-29f4561003b2071f3eac15d94bbf9c3d9133e4923d66b66488aacdfd879723a1ec84e5de553ecbeb6cfadc0ca51fa9b61bfb97a85adf7b252b1d311a792cfb74",
            "file": "projects/backoffice/src/app/shared/components/confirm/confirm.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-confirm",
            "styleUrls": [
                "./confirm.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./confirm.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "messageToShow",
                    "defaultValue": "'Are you sure?'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'amb-confirm',\r\n  templateUrl: './confirm.component.html',\r\n  styleUrls: ['./confirm.component.css'],\r\n})\r\nexport class ConfirmComponent implements OnInit {\r\n  messageToShow = 'Are you sure?';\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h3 {\r\n  text-align: center;\r\n}\r\n",
                    "styleUrl": "./confirm.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-dialog-content>\r\n  <h3>{{ messageToShow }}</h3>\r\n  <div fxLayout fxLayoutGap=\"15px\" fxLayoutAlign=\"center center\">\r\n    <button mat-raised-button color=\"accent\" mat-dialog-close=\"yes\">Yes</button>\r\n    <button mat-button mat-dialog-close>No</button>\r\n  </div>\r\n</mat-dialog-content>\r\n"
        },
        {
            "name": "ContainerComponent",
            "id": "component-ContainerComponent-2a41af3cd29c6525d8121f878b73177ab90038b0258fab29c5ed516fcc30b80538c50400225c71485b12799a7d62c875f69a59f7d61cb74fce483ffbf7b1a16a",
            "file": "projects/backoffice/src/app/shared/components/container/container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-container",
            "styleUrls": [
                "./container.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'amb-container',\r\n  templateUrl: './container.component.html',\r\n  styleUrls: ['./container.component.css']\r\n})\r\nexport class ContainerComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n  padding: 20px 0;\r\n  background-color: whitesmoke;\r\n  height: calc(100vh - 84px - 81px);\r\n}\r\n\r\nmat-card {\r\n  padding: 20px;\r\n}\r\n",
                    "styleUrl": "./container.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\" fxLayout fxLayoutAlign=\"center\">\r\n  <mat-card fxFlex=\"1 1 95%\">\r\n    <ng-content></ng-content>\r\n  </mat-card>\r\n</div>\r\n"
        },
        {
            "name": "CovidComponent",
            "id": "component-CovidComponent-e9c76450fd795d002c4a222cb5c5845b5139fec16c468be54d7fcfe90f658cdb700e1363dad82008602c4e711cf2ee37dfd4ed0c57c76fcb2f54a1d7dc8aaf96",
            "file": "projects/backoffice/src/app/dashboard/components/covid/covid.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-covid",
            "styleUrls": [
                "./covid.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./covid.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dataCovid",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DataCovid[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "legend",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "legendTitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "scheme",
                    "defaultValue": "'natural'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "showXAxisLabel",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "showYAxisLabel",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "view",
                    "defaultValue": "[700, 450]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[number, number]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "xAxis",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "xAxisLabel",
                    "defaultValue": "'Países'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "yAxis",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "yAxisLabel",
                    "defaultValue": "'Casos confirmados'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { CovidApplication } from '../../application/covid.application';\r\nimport { DataCovid } from '../../domain/entities/data-covid';\r\nimport { CovidModel } from '../../domain/models/covid.model';\r\n\r\n@Component({\r\n  selector: 'amb-covid',\r\n  templateUrl: './covid.component.html',\r\n  styleUrls: ['./covid.component.css'],\r\n})\r\nexport class CovidComponent implements OnInit {\r\n  view: [number, number] = [700, 450];\r\n  scheme = 'natural';\r\n  xAxis = true;\r\n  yAxis = true;\r\n  showXAxisLabel = true;\r\n  showYAxisLabel = true;\r\n  yAxisLabel = 'Casos confirmados';\r\n  xAxisLabel = 'Países';\r\n  legend = false;\r\n  legendTitle = '';\r\n\r\n  dataCovid: DataCovid[] = [];\r\n\r\n  constructor(private covidApplication: CovidApplication) {}\r\n\r\n  ngOnInit(): void {\r\n    this.covidApplication.getCovidData().subscribe((data) => {\r\n      this.dataCovid = data.map((covid: CovidModel) => ({\r\n        name: covid.countryRegion,\r\n        value: covid.confirmed,\r\n      }));\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./covid.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "covidApplication",
                        "type": "CovidApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "covidApplication",
                        "type": "CovidApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ngx-charts-bar-vertical\r\n  [view]=\"view\"\r\n  [results]=\"dataCovid\"\r\n  [xAxis]=\"xAxis\"\r\n  [yAxis]=\"yAxis\"\r\n  [legend]=\"legend\"\r\n  [legendTitle]=\"legendTitle\"\r\n  [showXAxisLabel]=\"showXAxisLabel\"\r\n  [showYAxisLabel]=\"showYAxisLabel\"\r\n  [xAxisLabel]=\"xAxisLabel\"\r\n  [yAxisLabel]=\"yAxisLabel\"\r\n></ngx-charts-bar-vertical>\r\n"
        },
        {
            "name": "FormComponent",
            "id": "component-FormComponent-057039d03ae547ae3daa30e21b4f0f09a3576cfa1f77320f1d0357efa126f4adb918e6e6d48198ec8cb36709f12d438f98181b0a69a12af435a7f206e5c173d9",
            "file": "projects/backoffice/src/app/medics/components/form/form.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-form",
            "styleUrls": [
                "./form.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "photoToShow",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "loadForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'amb-form',\r\n  templateUrl: './form.component.html',\r\n  styleUrls: ['./form.component.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class FormComponent implements OnInit {\r\n  title = '';\r\n  group!: FormGroup;\r\n  photoToShow = '';\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    private reference: MatDialogRef<FormComponent>\r\n  ) {\r\n    this.title = data ? 'EDIT' : 'ADD';\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loadForm();\r\n  }\r\n\r\n  loadForm() {\r\n    this.group = new FormGroup({\r\n      id: new FormControl(this.data?.id),\r\n      nombre: new FormControl(this.data?.nombre, Validators.required),\r\n      segundo_nombre: new FormControl(\r\n        this.data?.segundo_nombre,\r\n        Validators.required\r\n      ),\r\n      apellido: new FormControl(this.data?.apellido, Validators.required),\r\n      cmp: new FormControl(this.data?.cmp, Validators.required),\r\n      dni: new FormControl(this.data?.dni, Validators.required),\r\n      correo: new FormControl(this.data?.correo, [\r\n        Validators.required,\r\n        Validators.email,\r\n      ]),\r\n    });\r\n\r\n    if (this.data) {\r\n      this.group.addControl('foto', new FormControl());\r\n      this.photoToShow = this.data.foto ? this.data.foto : '';\r\n    } else {\r\n      this.group.addControl('foto', new FormControl(null, Validators.required));\r\n    }\r\n  }\r\n\r\n  onSave() {\r\n    const values = this.group.value; // {id:1, nombre:\"\", segundo_nombre: \"\", ...}\r\n    const recordId = values.id;\r\n    delete values.id;\r\n\r\n    const fd = new FormData();\r\n    for (const key of Object.keys(values)) {\r\n      if (key === 'foto' && values[key]) {\r\n        fd.append(key, values[key]);\r\n      } else if (key !== 'foto') {\r\n        fd.append(key, values[key]);\r\n      }\r\n    }\r\n\r\n    this.reference.close({ id: recordId, medic: fd });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form-modal {\r\n  width: 600px;\r\n}\r\n/*\r\n.form-modal .mat-dialog-container {\r\n  padding: 0;\r\n} */\r\n\r\n.form-modal .mat-dialog-container {\r\n  padding: 0 !important;\r\n}\r\n\r\n.form-modal .mat-dialog-content {\r\n  margin: 0;\r\n  padding: 24px;\r\n}\r\n\r\n@media screen and (max-width: 599px) {\r\n  .form-modal {\r\n    width: 95%;\r\n    max-width: 95% !important;\r\n  }\r\n}\r\n",
                    "styleUrl": "./form.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "reference",
                        "type": "MatDialogRef<FormComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "reference",
                        "type": "MatDialogRef<FormComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-toolbar fxLayout fxLayoutAlign=\"space-between center\">\r\n  <h3>{{ title }}</h3>\r\n  <button mat-icon-button matDialogClose>\r\n    <mat-icon>close</mat-icon>\r\n  </button>\r\n</mat-toolbar>\r\n<mat-dialog-content>\r\n  <form fxLayout=\"column\" [formGroup]=\"group\">\r\n    <div fxLayout fxLayoutGap=\"10px\">\r\n      <div fxLayout=\"column\" fxFlex=\"1 1 33%\">\r\n        <amb-photo\r\n          formControlName=\"foto\"\r\n          [photoByDefault]=\"photoToShow\"\r\n        ></amb-photo>\r\n      </div>\r\n      <div fxLayout=\"column\" fxFlex=\"1 1 33%\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>Nombre</mat-label>\r\n          <input type=\"text\" matInput required formControlName=\"nombre\" />\r\n        </mat-form-field>\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>Segundo nombre</mat-label>\r\n          <input\r\n            type=\"text\"\r\n            matInput\r\n            required\r\n            formControlName=\"segundo_nombre\"\r\n          />\r\n        </mat-form-field>\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>Apellido</mat-label>\r\n          <input type=\"text\" matInput required formControlName=\"apellido\" />\r\n        </mat-form-field>\r\n      </div>\r\n      <div fxLayout=\"column\" fxFlex=\"1 1 33%\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>CMP</mat-label>\r\n          <input type=\"text\" matInput required formControlName=\"cmp\" />\r\n        </mat-form-field>\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>DNI</mat-label>\r\n          <input type=\"text\" matInput required formControlName=\"dni\" />\r\n        </mat-form-field>\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>Correo</mat-label>\r\n          <input type=\"text\" matInput required formControlName=\"correo\" />\r\n        </mat-form-field>\r\n      </div>\r\n    </div>\r\n\r\n    <div fxLayout fxLayoutAlign=\"end\" fxLayoutGap=\"10px\">\r\n      <button\r\n        mat-raised-button\r\n        color=\"primary\"\r\n        type=\"button\"\r\n        [disabled]=\"group.invalid\"\r\n        (click)=\"onSave()\"\r\n      >\r\n        Grabar\r\n      </button>\r\n      <button mat-button color=\"primary\" type=\"button\" mat-dialog-close>\r\n        Cancelar\r\n      </button>\r\n    </div>\r\n  </form>\r\n</mat-dialog-content>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-a557eec14f72c438a8033301f4d6ce023e0a1844a3b06ec2b38794a612acc31735ae78a5ee10071b230c8c20d699eb914554e69d07ade54adb371da8efb464cc",
            "file": "stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n\n.welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-a04782aa5af6660a4772fbabee1cbf9992def225129e75749c430b4d0675b19fa7789f4c4c6af7919c1ee6b444af5f76655e95968af5e8a00cc24f51415ba522-1",
            "file": "projects/backoffice/src/app/core/components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-header",
            "styleUrls": [
                "./header.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "username",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit } from '@angular/core';\r\nimport { AuthApplication } from '../../application/auth.application';\r\nimport { StorageApplication } from '../../application/storage.application';\r\nimport jwt_decode from 'jwt-decode';\r\n\r\ninterface IPayload {\r\n  name: string;\r\n  email: string;\r\n  roles: string[];\r\n}\r\n\r\n@Component({\r\n  selector: 'amb-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.css'],\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n  username = '';\r\n\r\n  constructor(\r\n    @Inject(AuthApplication) private authApplication: AuthApplication,\r\n    private storageApplication: StorageApplication\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    const accessToken = this.storageApplication.getField(\r\n      'accessToken'\r\n    ) as string;\r\n    const payload: IPayload = jwt_decode(accessToken);\r\n    this.username = payload.name;\r\n  }\r\n\r\n  logout() {\r\n    this.authApplication.logout();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-toolbar {\r\n  background-color: white !important;\r\n  border-bottom: 2px solid #6b6b6b2b;\r\n}\r\n\r\n.profile {\r\n  height: 100%;\r\n}\r\n\r\n.profile img {\r\n  width: 100%;\r\n  max-width: 40px;\r\n  margin-right: 10px;\r\n}\r\n",
                    "styleUrl": "./header.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authApplication",
                        "type": "AuthApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "storageApplication",
                        "type": "StorageApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "authApplication",
                        "type": "AuthApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storageApplication",
                        "type": "StorageApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<mat-toolbar fxLayout fxLayoutAlign=\"space-between center\">\r\n  <button mat-icon-button>\r\n    <mat-icon>menu</mat-icon>\r\n  </button>\r\n\r\n  <button mat-button class=\"profile\" [matMenuTriggerFor]=\"menu\">\r\n    <img src=\"/assets/img/user.png\" alt=\"\" />\r\n    <span>{{ username | uppercase }}</span>\r\n    <mat-icon>keyboard_arrow_down</mat-icon>\r\n  </button>\r\n  <mat-menu #menu=\"matMenu\">\r\n    <button mat-menu-item>\r\n      <mat-icon>lock</mat-icon>\r\n      Bloquear sesión\r\n    </button>\r\n    <button mat-menu-item (click)=\"logout()\">\r\n      <mat-icon>logout</mat-icon>\r\n      Cerrar sesión\r\n    </button>\r\n  </mat-menu>\r\n</mat-toolbar>\r\n"
        },
        {
            "name": "HijoComponent",
            "id": "component-HijoComponent-633cb96823d8a378fad198107c502a91464e81c99273d840c1b4fde909cbba7ea2aadde24e874c78dcc6c91ccafa694c11886ffbf6447958d086b5d14856ac20",
            "file": "projects/backoffice/src/app/hijo/hijo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-hijo",
            "styleUrls": [
                "./hijo.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./hijo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "info",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "Date",
                    "decorators": []
                },
                {
                    "name": "listUsers",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "TUser",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onNewMessage",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { TUser, User } from '../padre/padre.component';\r\n\r\n@Component({\r\n  selector: 'amb-hijo',\r\n  templateUrl: './hijo.component.html',\r\n  styleUrls: ['./hijo.component.css'],\r\n})\r\nexport class HijoComponent implements OnInit {\r\n  @Input() info!: Date;\r\n  @Output() onNewMessage = new EventEmitter();\r\n  // @Input() listUsers: User[] = [];\r\n  @Input() listUsers: TUser = [];\r\n\r\n  constructor() {\r\n    const infoUser: User = new User('Sergio', 40);\r\n    setTimeout(() => this.onNewMessage.emit(infoUser), 3000);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    console.log('# users', this.listUsers.length);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./hijo.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>hijo works!</p>\r\n<div>{{ info }}</div>\r\n\r\n<ul>\r\n  <li *ngFor=\"let user of listUsers\">{{ user.name }} - {{ user.age }}</li>\r\n</ul>\r\n"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-ecb30c4d4bfd4f57450aade1543cb4730710c238a239a67cdfe088b0f97d43b33f36560a1e79849008759122aa9c98e2e62fbd8612560f8f393320eba63350fe",
            "file": "projects/backoffice/src/app/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-home",
            "styleUrls": [
                "./home.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'amb-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.css']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./home.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>home works!</p>\r\n"
        },
        {
            "name": "LockScreenComponent",
            "id": "component-LockScreenComponent-a68aa70a0890f229c79e4197dfa8d3cdfb8c329f366127eebb174df6a353a63469c436d4344c6e0b863d94b5e3790dce8ff8db49594b29cddc4cc44536017786",
            "file": "projects/backoffice/src/app/core/components/lock-screen/lock-screen.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-lock-screen",
            "styleUrls": [
                "./lock-screen.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./lock-screen.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'amb-lock-screen',\r\n  templateUrl: './lock-screen.component.html',\r\n  styleUrls: ['./lock-screen.component.css']\r\n})\r\nexport class LockScreenComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n  position: fixed;\r\n  z-index: 100000000000;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background-color: blue;\r\n}\r\n\r\n.container h1 {\r\n  color: white;\r\n  font-size: 40px;\r\n  text-align: center;\r\n}\r\n",
                    "styleUrl": "./lock-screen.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\" fxLayout fxLayoutAlign=\"center center\">\r\n  <h1>Sesión bloqueada</h1>\r\n</div>\r\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-48898a43d8865c5e9a16cb3b3a5fb28b7df17a37317e4419d51b06a08173275ad8db83c4dadd5b4f5d9eff1b550b67d6131e1301893e1dcb56754782ccd18e43",
            "file": "projects/backoffice/src/app/core/components/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-login",
            "styleUrls": [
                "./login.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "loadForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validateForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport ValidatorsCustom from '../../../shared/helpers/validators';\r\nimport { AuthApplication } from '../../application/auth.application';\r\nimport { AuthEntity } from '../../domain/entities/auth.entity';\r\n\r\n@Component({\r\n  selector: 'amb-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css'],\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  formGroup!: FormGroup;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private authApplication: AuthApplication\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loadForm();\r\n  }\r\n\r\n  login() {\r\n    const { email, password } = this.formGroup.value;\r\n    const auth = new AuthEntity(email, password, 'abcde');\r\n    this.authApplication.login(auth);\r\n  }\r\n\r\n  loadForm() {\r\n    this.formGroup = new FormGroup({\r\n      email: new FormControl(null, [\r\n        Validators.required,\r\n        Validators.email,\r\n        //ValidatorsCustom.validateEmailCompany,\r\n        ValidatorsCustom.validateEmailCompanyCustom([\r\n          '@correo.com',\r\n          '@correo.com.ar',\r\n        ]),\r\n      ]),\r\n      password: new FormControl(null, [\r\n        Validators.required,\r\n        Validators.minLength(3),\r\n        Validators.maxLength(20),\r\n      ]),\r\n    });\r\n  }\r\n\r\n  get email() {\r\n    return this.formGroup.get('email');\r\n  }\r\n\r\n  get password() {\r\n    return this.formGroup.get('password');\r\n  }\r\n\r\n  validateForm() {\r\n    this.formGroup.get('password')?.markAsTouched();\r\n    this.formGroup.updateValueAndValidity();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  width: 80%;\r\n  display: block;\r\n}\r\n\r\nh1,\r\nh2 {\r\n  text-align: center;\r\n}\r\n",
                    "styleUrl": "./login.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authApplication",
                        "type": "AuthApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authApplication",
                        "type": "AuthApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "email": {
                    "name": "email",
                    "getSignature": {
                        "name": "email",
                        "type": "",
                        "returnType": "",
                        "line": 50
                    }
                },
                "password": {
                    "name": "password",
                    "getSignature": {
                        "name": "password",
                        "type": "",
                        "returnType": "",
                        "line": 54
                    }
                }
            },
            "templateData": "<form fxLayout=\"column\" [formGroup]=\"formGroup\">\r\n  <h1>Sistema de Historias</h1>\r\n  <h2>Credenciales</h2>\r\n  <mat-form-field appearance=\"outline\">\r\n    <mat-label>Correo</mat-label>\r\n    <input type=\"text\" matInput formControlName=\"email\" required />\r\n    <mat-error *ngIf=\"email?.hasError('required')\"\r\n      >El correo es obligatorio</mat-error\r\n    >\r\n    <mat-error *ngIf=\"email?.hasError('email')\"\r\n      >Debe ingresar un correo válido\r\n    </mat-error>\r\n    <mat-error *ngIf=\"email?.hasError('emailNotAllowed')\"\r\n      >Debe ingresar un correo de la empresa\r\n    </mat-error>\r\n  </mat-form-field>\r\n  <mat-form-field appearance=\"outline\">\r\n    <mat-label>Contraseña</mat-label>\r\n    <input\r\n      type=\"password\"\r\n      matInput\r\n      formControlName=\"password\"\r\n      required\r\n      (input)=\"validateForm()\"\r\n    />\r\n    <mat-error *ngIf=\"password?.hasError('required')\"\r\n      >La contraseña es obligaria</mat-error\r\n    >\r\n    <mat-error\r\n      *ngIf=\"password?.hasError('minlength') || password?.hasError('maxlength')\"\r\n      >La contraseña debe estar entre 3 y 20 caracteres</mat-error\r\n    >\r\n  </mat-form-field>\r\n  <button\r\n    mat-raised-button\r\n    color=\"primary\"\r\n    type=\"button\"\r\n    (click)=\"login()\"\r\n    [disabled]=\"formGroup.invalid\"\r\n  >\r\n    Ingresar\r\n  </button>\r\n</form>\r\n"
        },
        {
            "name": "MenuComponent",
            "id": "component-MenuComponent-bfc52d1081001fcc76e9b8ee6f64f1b2ef505ae7670fffaffffc6c9282e552532f7de8cb11eb62affa8298bbdbaa40396f52753d8a5ee9a6f772e94bce804385",
            "file": "projects/backoffice/src/app/core/components/menu/menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-menu",
            "styleUrls": [
                "./menu.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'amb-menu',\r\n  templateUrl: './menu.component.html',\r\n  styleUrls: ['./menu.component.css']\r\n})\r\nexport class MenuComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-nav-list {\r\n  width: 85%;\r\n  margin: 0 auto;\r\n  overflow: hidden;\r\n}\r\n\r\nmat-list-item {\r\n  border-radius: 8px;\r\n  margin-top: 10px !important;\r\n  color: white;\r\n}\r\n\r\nmat-list-item.menu:hover {\r\n  background-color: rgba(255, 255, 255, 0.1);\r\n  color: white !important;\r\n}\r\n\r\n.mat-list-base {\r\n  padding-top: 0;\r\n}\r\n\r\na,\r\na:link,\r\na:visited,\r\na:active {\r\n  color: rgba(255, 255, 255, 0.5) !important;\r\n  font-size: 13px;\r\n  font-weight: 500;\r\n  display: block;\r\n  width: 100%;\r\n}\r\n\r\na:hover {\r\n  /* background-color: rgba(255, 255, 255, 0.1); */\r\n  color: white !important;\r\n}\r\n\r\na span {\r\n  display: inline-block;\r\n  padding-left: 24px;\r\n}\r\n\r\n.activeLink {\r\n  background-color: rgba(255, 255, 255, 0.1);\r\n  color: white !important;\r\n}\r\n\r\n.activeLink a,\r\n.activeLink a:link,\r\n.activeLink a:visited,\r\n.activeLink a:active {\r\n  color: white !important;\r\n  font-size: 13px;\r\n  font-weight: 500;\r\n  display: block;\r\n  width: 100%;\r\n}\r\n",
                    "styleUrl": "./menu.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-nav-list>\r\n  <mat-list-item class=\"menu\" routerLinkActive=\"activeLink\">\r\n    <a routerLink=\"/dashboard\">\r\n      <button mat-button>\r\n        <mat-icon>dashboard</mat-icon>\r\n        <span>Dashboard</span>\r\n      </button>\r\n    </a>\r\n  </mat-list-item>\r\n  <mat-list-item class=\"menu\" routerLinkActive=\"activeLink\">\r\n    <a routerLink=\"/medics\">\r\n      <button mat-button>\r\n        <mat-icon>dashboard</mat-icon>\r\n        <span>Medics</span>\r\n      </button></a\r\n    >\r\n  </mat-list-item>\r\n  <mat-list-item class=\"menu\" routerLinkActive=\"activeLink\"\r\n    ><a routerLink=\"/drivers\">\r\n      <button mat-button>\r\n        <mat-icon>dashboard</mat-icon>\r\n        <span>Drivers</span>\r\n      </button>\r\n    </a>\r\n  </mat-list-item>\r\n  <mat-list-item class=\"menu\" routerLinkActive=\"activeLink\">\r\n    <a routerLink=\"/histories\">\r\n      <button mat-button>\r\n        <mat-icon>dashboard</mat-icon>\r\n        <span>Histories</span>\r\n      </button>\r\n    </a>\r\n  </mat-list-item>\r\n</mat-nav-list>\r\n"
        },
        {
            "name": "PadreComponent",
            "id": "component-PadreComponent-cdffdf81e4422e9de0267b75e77a6fc57051c348e149732f44f6d24b3f178726820f4a65c2b8f8db2bb226bfb9a68b4ac8eba3a41870f59cea91938c75c4d5ab",
            "file": "projects/backoffice/src/app/padre/padre.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-padre",
            "styleUrls": [
                "./padre.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./padre.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentDate",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "users",
                    "defaultValue": "[\r\n    new User('Sergio', 40),\r\n    new User('Juan', 30),\r\n    new User('Pedro', 20),\r\n    new User('Santiago', 40),\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TUser",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showAlert",
                    "args": [
                        {
                            "name": "msg",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n/* export interface User {\r\n  id: number;\r\n  name: string;\r\n  age: number;\r\n  lastname: string;\r\n} */\r\n\r\nexport class User {\r\n  name: string;\r\n  age: number;\r\n\r\n  constructor(name2: string, age2: number) {\r\n    this.ageAllowed(age2);\r\n    this.name = name2;\r\n    this.age = age2;\r\n  }\r\n\r\n  ageAllowed(age: number) {\r\n    if (age < 18) {\r\n      throw new Error('Age min is 18');\r\n    }\r\n  }\r\n}\r\n\r\nexport type TUser = User[]; // Array<User>\r\n\r\n@Component({\r\n  selector: 'amb-padre',\r\n  templateUrl: './padre.component.html',\r\n  styleUrls: ['./padre.component.css'],\r\n})\r\nexport class PadreComponent implements OnInit {\r\n  currentDate = new Date();\r\n\r\n  users: TUser = [\r\n    new User('Sergio', 40),\r\n    new User('Juan', 30),\r\n    new User('Pedro', 20),\r\n    new User('Santiago', 40),\r\n  ];\r\n\r\n  constructor() {\r\n    setInterval(() => (this.currentDate = new Date()), 1000);\r\n    setTimeout(() => this.users.pop(), 6000);\r\n  }\r\n\r\n  showAlert(msg: User) {\r\n    alert(JSON.stringify(msg));\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./padre.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 42
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>padre works!</p>\r\n\r\n<amb-hijo\r\n  [info]=\"currentDate\"\r\n  [listUsers]=\"users\"\r\n  (onNewMessage)=\"showAlert($event)\"\r\n>\r\n</amb-hijo>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-7126d8c2607c946741c651482413b43feb72b2d63cac9d3ac173fde206a5e635eb4cdbf7ca7ac9327c7d4d05cf7ef619144c34c11609ad677081d0ee4e855064",
            "file": "stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PageDashboardComponent",
            "id": "component-PageDashboardComponent-91c99ce3e87f96efdae4b1819adc2c68c7462ccd7dedd184fee4275f1dafcba8de20ac0a73bd04ec78abc74013c9dc381c94b83256c734ccbfaf6a7970468f78",
            "file": "projects/backoffice/src/app/dashboard/pages/page-dashboard/page-dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-page-dashboard",
            "styleUrls": [
                "./page-dashboard.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./page-dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "statusUser",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit } from '@angular/core';\r\nimport { AuthApplication } from '../../../core/application/auth.application';\r\n\r\n@Component({\r\n  selector: 'amb-page-dashboard',\r\n  templateUrl: './page-dashboard.component.html',\r\n  styleUrls: ['./page-dashboard.component.css'],\r\n})\r\nexport class PageDashboardComponent implements OnInit {\r\n  statusUser = false;\r\n\r\n  constructor(@Inject(AuthApplication) private auth: AuthApplication) {}\r\n\r\n  ngOnInit(): void {\r\n    this.statusUser = this.auth.isAuthenticated;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./page-dashboard.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<amb-title title=\"Dashboard\" icon=\"dashboard\"> </amb-title>\r\n<amb-container>\r\n  <div fxLayout fxLayout.lt-md=\"column\" fxLayoutAlign=\"space-between\">\r\n    <amb-covid></amb-covid>\r\n    <amb-socket></amb-socket>\r\n  </div>\r\n</amb-container>\r\n"
        },
        {
            "name": "PageDriversComponent",
            "id": "component-PageDriversComponent-b2f7bdb829fdfb5006faa4e9052de671c7bbb756245675539b071588a1041471e68ad416f3876b5cc446a2addc7260f911a1b1612167b92176b1943641a582b7",
            "file": "projects/backoffice/src/app/drivers/pages/page-drivers/page-drivers.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-page-drivers",
            "styleUrls": [
                "./page-drivers.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./page-drivers.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "additionalInformationExcel",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DriverEntity[]",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "fileNameExportToExcel",
                    "defaultValue": "'drivers'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "metaData",
                    "defaultValue": "[\r\n    { field: 'nombre', header: 'Name', sortable: true },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaDataColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "metaDataColumns",
                    "defaultValue": "[\r\n    { field: 'nombre', header: 'Name', sortable: true },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaDataColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "titleSheetExportToExcel",
                    "defaultValue": "'List of Drivers'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openForm",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "exportToExcel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "exportToPdf",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Sort } from '@angular/material/sort';\r\nimport { UtilsService } from '../../../helpers/services/utils.service';\r\nimport { BaseComponent } from '../../../shared/classes/base-component';\r\nimport { MetaDataColumn } from '../../../shared/interfaces/metadatacolumn.interface';\r\nimport { ResultPage } from '../../../shared/interfaces/result-page.interface';\r\nimport { DriverApplication } from '../../application/driver.application';\r\nimport { DriverEntity } from '../../domain/entities/driver.entity';\r\n\r\n@Component({\r\n  selector: 'amb-page-drivers',\r\n  templateUrl: './page-drivers.component.html',\r\n  styleUrls: ['./page-drivers.component.css'],\r\n})\r\nexport class PageDriversComponent extends BaseComponent implements OnInit {\r\n  metaData: MetaDataColumn[] = [\r\n    { field: 'nombre', header: 'Name', sortable: true },\r\n  ];\r\n  metaDataColumns: MetaDataColumn[] = [\r\n    { field: 'nombre', header: 'Name', sortable: true },\r\n  ];\r\n  titleSheetExportToExcel: string = 'List of Drivers';\r\n  fileNameExportToExcel: string = 'drivers';\r\n  additionalInformationExcel = {};\r\n\r\n  data: DriverEntity[] = [];\r\n\r\n  constructor(\r\n    protected override utilsService: UtilsService,\r\n    private driverApplication: DriverApplication\r\n  ) {\r\n    super(utilsService);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getPage(0);\r\n  }\r\n\r\n  getPage(page: number): void {\r\n    this.driverApplication\r\n      .getPage(page)\r\n      .subscribe((data: ResultPage<DriverEntity>) => {\r\n        this.data = data.records;\r\n      });\r\n  }\r\n\r\n  openForm(row: any = null) {\r\n    /* this.utilsService.showModal(FormComponent, {\r\n      panelClass: 'form-modal',\r\n      //width: '600px',\r\n      data: row,\r\n      disableClose: true,\r\n    }); */\r\n  }\r\n\r\n  /*   changeSort(sort: Sort) {\r\n    if (sort.active && sort.direction) {\r\n      console.log(sort);\r\n      this.data = [\r\n        ...this.data.sort((a, b) => {\r\n          const isAsc = sort.direction.toUpperCase() === 'ASC';\r\n          switch (sort.active) {\r\n            case 'name':\r\n              return this.compare(a.name, b.name, isAsc);\r\n            case 'lastname':\r\n              return this.compare(a.lastname, b.lastname, isAsc);\r\n            case 'email':\r\n              return this.compare(a.email, b.email, isAsc);\r\n            case 'phone':\r\n              return this.compare(a.phone, b.phone, isAsc);\r\n            case 'status':\r\n              return this.compare(a.status, b.status, isAsc);\r\n            default:\r\n              return 0;\r\n          }\r\n        }),\r\n      ];\r\n    }\r\n  }\r\n\r\n  compare(fieldA: number | string, fieldB: number | string, isAsc: boolean) {\r\n    return (isAsc ? 1 : -1) * (fieldA < fieldB ? -1 : 1);\r\n  } */\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./page-drivers.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "driverApplication",
                        "type": "DriverApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "driverApplication",
                        "type": "DriverApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<amb-title title=\"Drivers\" icon=\"dashboard\">\r\n  <button mat-flat-button color=\"primary\" matTooltip=\"ADD\" (click)=\"openForm()\">\r\n    <mat-icon>add</mat-icon>\r\n    Add\r\n  </button>\r\n</amb-title>\r\n<amb-container>\r\n  <perfect-scrollbar class=\"heightMaxPerfectScrollbar\">\r\n    <amb-table [metaData]=\"metaData\" [data]=\"data\">\r\n      <ng-container matColumnDef=\"actions\">\r\n        <th mat-header-cell *matHeaderCellDef></th>\r\n        <td mat-cell *matCellDef=\"let row\" class=\"align-right\">\r\n          <button\r\n            mat-stroked-button\r\n            color=\"primary\"\r\n            matTooltip=\"EDIT\"\r\n            (click)=\"openForm(row)\"\r\n          >\r\n            <mat-icon>edit</mat-icon>\r\n          </button>\r\n          <button\r\n            mat-stroked-button\r\n            color=\"accent\"\r\n            matTooltip=\"DELETE\"\r\n            (click)=\"delete(row)\"\r\n          >\r\n            <mat-icon>delete</mat-icon>\r\n          </button>\r\n        </td>\r\n      </ng-container>\r\n    </amb-table>\r\n  </perfect-scrollbar>\r\n</amb-container>\r\n"
        },
        {
            "name": "PageHistoriesComponent",
            "id": "component-PageHistoriesComponent-d6672720e86ac141cd45536272895e94a90cea44595c5604f415ddc909d230a93bcbe1c5b6529b19c1060d1e479d04affc3ead17add4a4e63a9d6bb2641d9520",
            "file": "projects/backoffice/src/app/histories/pages/page-histories/page-histories.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-page-histories",
            "styleUrls": [
                "./page-histories.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./page-histories.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "defaultValue": "[\r\n    {\r\n      patient: 'Jorge Castro',\r\n      doctor: 'Dr. Juan',\r\n      date: '10/10/2020',\r\n      time: '10:00',\r\n      status: 'Pendiente',\r\n    },\r\n    {\r\n      patient: 'Jorge Castro',\r\n      doctor: 'Dr. Juan',\r\n      date: '10/10/2020',\r\n      time: '10:00',\r\n      status: 'Pendiente',\r\n    },\r\n    {\r\n      patient: 'Jorge Castro',\r\n      doctor: 'Dr. Juan',\r\n      date: '10/10/2020',\r\n      time: '10:00',\r\n      status: 'Pendiente',\r\n    },\r\n    {\r\n      patient: 'Jorge Castro',\r\n      doctor: 'Dr. Juan',\r\n      date: '10/10/2020',\r\n      time: '10:00',\r\n      status: 'Pendiente',\r\n    },\r\n    {\r\n      patient: 'Jorge Castro',\r\n      doctor: 'Dr. Juan',\r\n      date: '10/10/2020',\r\n      time: '10:00',\r\n      status: 'Pendiente',\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "metaData",
                    "defaultValue": "[\r\n    { field: 'patient', header: 'Patient Name', sortable: true },\r\n    { field: 'doctor', header: 'Doctor Name', sortable: true },\r\n    { field: 'date', header: 'Date', sortable: true },\r\n    { field: 'status', header: 'Status', sortable: true },\r\n    { field: 'time', header: 'Time', sortable: true },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaDataColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { MetaDataColumn } from '../../../shared/interfaces/metadatacolumn.interface';\r\n\r\n@Component({\r\n  selector: 'amb-page-histories',\r\n  templateUrl: './page-histories.component.html',\r\n  styleUrls: ['./page-histories.component.css'],\r\n})\r\nexport class PageHistoriesComponent implements OnInit {\r\n  metaData: MetaDataColumn[] = [\r\n    { field: 'patient', header: 'Patient Name', sortable: true },\r\n    { field: 'doctor', header: 'Doctor Name', sortable: true },\r\n    { field: 'date', header: 'Date', sortable: true },\r\n    { field: 'status', header: 'Status', sortable: true },\r\n    { field: 'time', header: 'Time', sortable: true },\r\n  ];\r\n\r\n  data = [\r\n    {\r\n      patient: 'Jorge Castro',\r\n      doctor: 'Dr. Juan',\r\n      date: '10/10/2020',\r\n      time: '10:00',\r\n      status: 'Pendiente',\r\n    },\r\n    {\r\n      patient: 'Jorge Castro',\r\n      doctor: 'Dr. Juan',\r\n      date: '10/10/2020',\r\n      time: '10:00',\r\n      status: 'Pendiente',\r\n    },\r\n    {\r\n      patient: 'Jorge Castro',\r\n      doctor: 'Dr. Juan',\r\n      date: '10/10/2020',\r\n      time: '10:00',\r\n      status: 'Pendiente',\r\n    },\r\n    {\r\n      patient: 'Jorge Castro',\r\n      doctor: 'Dr. Juan',\r\n      date: '10/10/2020',\r\n      time: '10:00',\r\n      status: 'Pendiente',\r\n    },\r\n    {\r\n      patient: 'Jorge Castro',\r\n      doctor: 'Dr. Juan',\r\n      date: '10/10/2020',\r\n      time: '10:00',\r\n      status: 'Pendiente',\r\n    },\r\n  ];\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./page-histories.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 54
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<amb-title title=\"Histories\" icon=\"dashboard\"></amb-title>\r\n<amb-container>\r\n  <amb-table [metaData]=\"metaData\" [data]=\"data\"></amb-table>\r\n</amb-container>\r\n"
        },
        {
            "name": "PageLockScreenComponent",
            "id": "component-PageLockScreenComponent-64524687aacf5f2723ac204d00cfb878ac92fa641d60b0a3943eb8cb49c9aa55fd34d70fbd3fdae63425e1c799a618ec0d97629163dbd434b940a0e666802d15",
            "file": "projects/backoffice/src/app/core/pages/page-lock-screen/page-lock-screen.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-page-lock-screen",
            "styleUrls": [
                "./page-lock-screen.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./page-lock-screen.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'amb-page-lock-screen',\r\n  templateUrl: './page-lock-screen.component.html',\r\n  styleUrls: ['./page-lock-screen.component.css']\r\n})\r\nexport class PageLockScreenComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./page-lock-screen.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<amb-lock-screen></amb-lock-screen>\r\n"
        },
        {
            "name": "PageLoginComponent",
            "id": "component-PageLoginComponent-5a7ad158585824e889b0a9116634c36e3242de606da72fbe3546cc3072dcfc0248d38ffd1e8c931eec255ee512106ea84a9d691532b30531615e45e99248f6e3",
            "file": "projects/backoffice/src/app/core/pages/page-login/page-login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-page-login",
            "styleUrls": [
                "./page-login.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./page-login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ILayout } from '../../../config/interfaces/layout.interface';\r\nimport { InactivityService } from '../../../config/services/inactivity.service';\r\nimport { LayoutService } from '../../../config/services/layout.service';\r\n\r\n@Component({\r\n  selector: 'amb-page-login',\r\n  templateUrl: './page-login.component.html',\r\n  styleUrls: ['./page-login.component.css'],\r\n})\r\nexport class PageLoginComponent implements OnInit {\r\n  constructor(\r\n    private layoutService: LayoutService,\r\n    private inactivityService: InactivityService\r\n  ) {\r\n    const configLayout: ILayout = { header: false, menu: false };\r\n    //layoutService.settingConfiguration(configLayout);\r\n    layoutService.configuration = configLayout;\r\n    inactivityService.stopWatching();\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  ngOnDestroy(): void {\r\n    const configLayout: ILayout = { header: true, menu: true };\r\n    this.layoutService.configuration = configLayout;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n  height: 100vh;\r\n}\r\n\r\n.info h2 {\r\n  color: whitesmoke;\r\n  font-size: 35px;\r\n  line-height: 46px;\r\n  text-align: center;\r\n  font-weight: normal;\r\n}\r\n\r\n.login {\r\n  background-color: whitesmoke;\r\n}\r\n",
                    "styleUrl": "./page-login.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "layoutService",
                        "type": "LayoutService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "inactivityService",
                        "type": "InactivityService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "layoutService",
                        "type": "LayoutService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "inactivityService",
                        "type": "InactivityService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\r\n  fxLayout\r\n  fxLayout.lt-sm=\"column\"\r\n  fxLayoutAlign=\"space-between\"\r\n  class=\"container\"\r\n  [ngStyle]=\"{ 'background-image': 'url(assets/img/background.png)' }\"\r\n>\r\n  <div\r\n    fxLayout=\"column\"\r\n    fxLayoutAlign=\"center\"\r\n    fxFlex=\"1 1 30%\"\r\n    fxFlex.lt-md=\"1 1 50%\"\r\n    fxFlex.lt-sm=\"1 1 100%\"\r\n    class=\"info\"\r\n    fxHide.lt-sm\r\n  >\r\n    <h2>Sistema de Historias</h2>\r\n  </div>\r\n\r\n  <div\r\n    fxLayout\r\n    fxFlex=\"1 1 30%\"\r\n    fxFlex.lt-md=\"1 1 50%\"\r\n    fxFlex.lt-sm=\"1 1 100%\"\r\n    fxLayoutAlign=\"center center\"\r\n    class=\"login\"\r\n  >\r\n    <amb-login></amb-login>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "PageMedicsComponent",
            "id": "component-PageMedicsComponent-14cffb44d48e2b5ac4b3562541867a72d5dcdf45e87a15a17cdb9823e28aee30bc9177db11363bcc95a710632ae4faacd194434bbfdf777f1f75bf472699e583",
            "file": "projects/backoffice/src/app/medics/pages/page-medics/page-medics.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-page-medics",
            "styleUrls": [
                "./page-medics.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./page-medics.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "additionalInformationExcel",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "currentPage",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MedicEntity[]",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "dataOriginal",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MedicEntity[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "fileNameExportToExcel",
                    "defaultValue": "'medics'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "metaData",
                    "defaultValue": "[\r\n    { field: 'nombre', header: 'Name', sortable: true },\r\n    { field: 'apellido', header: 'Lastname', sortable: true },\r\n    { field: 'segundo_nombre', header: 'Surname', sortable: true },\r\n    { field: 'correo', header: 'Email', sortable: true },\r\n    { field: 'cmp', header: 'CMP', sortable: true },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaDataColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "metaDataColumns",
                    "defaultValue": "[\r\n    { field: 'nombre', header: 'Name', sortable: true },\r\n    { field: 'apellido', header: 'Lastname', sortable: true },\r\n    { field: 'segundo_nombre', header: 'Surname', sortable: true },\r\n    { field: 'correo', header: 'Email', sortable: true },\r\n    { field: 'cmp', header: 'CMP', sortable: true },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaDataColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "titleSheetExportToExcel",
                    "defaultValue": "'List of Medics'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "totalRecords",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "changePage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "exportDataExcel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openForm",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "search",
                    "args": [
                        {
                            "name": "term",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "term",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "exportToExcel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "exportToPdf",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { MetaDataColumn } from '../../../shared/interfaces/metadatacolumn.interface';\r\nimport { UtilsService } from '../../../helpers/services/utils.service';\r\nimport { BaseComponent } from '../../../shared/classes/base-component';\r\nimport { FormComponent } from '../../components/form/form.component';\r\nimport {\r\n  MedicEntity,\r\n  MedicPropertiesOptional,\r\n  MedicPropertiesRequired,\r\n} from '../../domain/entities/medic.entity';\r\nimport { MedicApplication } from '../../application/medic.application';\r\nimport { ResultPage } from '../../../shared/interfaces/result-page.interface';\r\n\r\n@Component({\r\n  selector: 'amb-page-medics',\r\n  templateUrl: './page-medics.component.html',\r\n  styleUrls: ['./page-medics.component.css'],\r\n})\r\nexport class PageMedicsComponent extends BaseComponent implements OnInit {\r\n  metaData: MetaDataColumn[] = [\r\n    { field: 'nombre', header: 'Name', sortable: true },\r\n    { field: 'apellido', header: 'Lastname', sortable: true },\r\n    { field: 'segundo_nombre', header: 'Surname', sortable: true },\r\n    { field: 'correo', header: 'Email', sortable: true },\r\n    { field: 'cmp', header: 'CMP', sortable: true },\r\n  ];\r\n  data: MedicEntity[] = [];\r\n  dataOriginal: MedicEntity[] = [];\r\n  currentPage = 0;\r\n  totalRecords = 0;\r\n\r\n  metaDataColumns: MetaDataColumn[] = [\r\n    { field: 'nombre', header: 'Name', sortable: true },\r\n    { field: 'apellido', header: 'Lastname', sortable: true },\r\n    { field: 'segundo_nombre', header: 'Surname', sortable: true },\r\n    { field: 'correo', header: 'Email', sortable: true },\r\n    { field: 'cmp', header: 'CMP', sortable: true },\r\n  ];\r\n  titleSheetExportToExcel: string = 'List of Medics';\r\n  fileNameExportToExcel: string = 'medics';\r\n  additionalInformationExcel = {};\r\n\r\n  constructor(\r\n    protected override utilsService: UtilsService,\r\n    private medicApplication: MedicApplication\r\n  ) {\r\n    super(utilsService);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getPage(0);\r\n  }\r\n\r\n  getPage(page: number): void {\r\n    this.medicApplication\r\n      .getPage(page)\r\n      .subscribe((data: ResultPage<MedicEntity>) => {\r\n        this.currentPage = page;\r\n        this.totalRecords = data.totalRecords;\r\n        this.data = data.records;\r\n        this.dataOriginal = data.records;\r\n      });\r\n  }\r\n\r\n  openForm(row: any = null) {\r\n    const reference = this.utilsService.showModal(FormComponent, {\r\n      panelClass: 'form-modal',\r\n      data: row,\r\n      disableClose: true,\r\n    });\r\n\r\n    reference.afterClosed().subscribe((result) => {\r\n      if (!result) {\r\n        return;\r\n      }\r\n\r\n      if (result.id) {\r\n        this.medicApplication\r\n          .update(result.id, result.medic)\r\n          .subscribe((result) => {\r\n            this.getPage(this.currentPage);\r\n          });\r\n      } else {\r\n        this.medicApplication.insert(result.medic).subscribe((result) => {\r\n          this.getPage(this.currentPage);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  changePage(page: number): void {\r\n    this.getPage(page);\r\n  }\r\n\r\n  search(term: string) {\r\n    if (term) {\r\n      this.data = this.data.filter(\r\n        (el: any) =>\r\n          el.nombre.toLowerCase().includes(term) ||\r\n          el.apellido.toLowerCase().includes(term)\r\n      );\r\n    } else {\r\n      this.data = [...this.dataOriginal];\r\n    }\r\n  }\r\n\r\n  exportDataExcel() {\r\n    this.additionalInformationExcel = {\r\n      'Fecha de creación': new Date().toISOString(),\r\n      Usuario: 'admin',\r\n    };\r\n    this.exportToExcel();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./page-medics.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "medicApplication",
                        "type": "MedicApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "medicApplication",
                        "type": "MedicApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<amb-title title=\"Medics\" icon=\"dashboard\">\r\n  <button mat-flat-button color=\"primary\" matTooltip=\"ADD\" (click)=\"openForm()\">\r\n    <mat-icon>add</mat-icon>\r\n    Add\r\n  </button>\r\n  <button\r\n    mat-stroked-button\r\n    color=\"accent\"\r\n    matTooltip=\"EXPORT TO EXCEL\"\r\n    (click)=\"exportDataExcel()\"\r\n  >\r\n    <mat-icon svgIcon=\"exportToExcel\"></mat-icon>\r\n    Excel\r\n  </button>\r\n  <button\r\n    mat-stroked-button\r\n    color=\"warn\"\r\n    matTooltip=\"EXPORT TO PDF\"\r\n    (click)=\"exportToPdf()\"\r\n  >\r\n    <mat-icon svgIcon=\"exportToPdf\"></mat-icon>\r\n    PDF\r\n  </button>\r\n</amb-title>\r\n<amb-container>\r\n  <perfect-scrollbar class=\"heightMaxPerfectScrollbar\">\r\n    <amb-table [metaData]=\"metaData\" [data]=\"data\">\r\n      <ng-container matColumnDef=\"actions\">\r\n        <th mat-header-cell *matHeaderCellDef></th>\r\n        <td mat-cell *matCellDef=\"let row\" class=\"align-right\">\r\n          <button\r\n            mat-stroked-button\r\n            color=\"primary\"\r\n            matTooltip=\"EDIT\"\r\n            (click)=\"openForm(row)\"\r\n            *roles-allowed=\"'MEDIC_EDIT'\"\r\n          >\r\n            <mat-icon>edit</mat-icon>\r\n          </button>\r\n          <button\r\n            mat-stroked-button\r\n            color=\"accent\"\r\n            matTooltip=\"DELETE\"\r\n            (click)=\"delete(row)\"\r\n            *roles-allowed=\"'MEDIC_EDIT'\"\r\n          >\r\n            <mat-icon>delete</mat-icon>\r\n          </button>\r\n        </td>\r\n      </ng-container>\r\n    </amb-table>\r\n  </perfect-scrollbar>\r\n\r\n  <div fxLayout fxLayoutAlign=\"space-between center\">\r\n    <amb-search (onSearch)=\"search($event)\"></amb-search>\r\n    <amb-paginator\r\n      [totalRecords]=\"totalRecords\"\r\n      [currentPage]=\"currentPage\"\r\n      (onChangePage)=\"changePage($event)\"\r\n    ></amb-paginator>\r\n  </div>\r\n</amb-container>\r\n"
        },
        {
            "name": "PaginatorComponent",
            "id": "component-PaginatorComponent-dbc191f2a157ceec7910c6cc946b03d181e14979ffe42c9f0004586dd3e5d7a5180d894962b7242707ade41205afccffe1fdc1697270727f29746429eaec90d6",
            "file": "projects/backoffice/src/app/shared/components/paginator/paginator.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-paginator",
            "styleUrls": [
                "./paginator.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./paginator.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentPage",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "totalRecords",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onChangePage",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter<number>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "pageSize",
                    "defaultValue": "environment.pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "totalPages",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "changePage",
                    "args": [
                        {
                            "name": "evt",
                            "type": "PageEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "PageEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { PageEvent } from '@angular/material/paginator';\r\nimport { environment } from 'projects/backoffice/src/environments/environment';\r\n\r\n@Component({\r\n  selector: 'amb-paginator',\r\n  templateUrl: './paginator.component.html',\r\n  styleUrls: ['./paginator.component.css'],\r\n})\r\nexport class PaginatorComponent implements OnInit {\r\n  @Input() totalRecords = 0;\r\n  @Input() currentPage = 0;\r\n  @Output() onChangePage: EventEmitter<number> = new EventEmitter<number>();\r\n  pageSize = environment.pageSize;\r\n  totalPages = 0;\r\n\r\n  constructor() {\r\n    this.totalPages = Math.ceil(this.totalRecords / this.pageSize);\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  changePage(evt: PageEvent) {\r\n    this.onChangePage.emit(evt.pageIndex);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./paginator.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-paginator\r\n  [length]=\"totalRecords\"\r\n  [pageSize]=\"pageSize\"\r\n  [pageIndex]=\"currentPage\"\r\n  showFirstLastButtons=\"true\"\r\n  (page)=\"changePage($event)\"\r\n></mat-paginator>\r\n"
        },
        {
            "name": "PhotoComponent",
            "id": "component-PhotoComponent-21023b8e5a522a2ff3faad74760229dd331323bc095f23c7f5d63fcb516fb7a30a1afbdef856552c1898f6a7f7cb8b959ebb4528965dd32ea491c224b5848d1c",
            "file": "projects/backoffice/src/app/shared/components/photo/photo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => PhotoComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "amb-photo",
            "styleUrls": [
                "./photo.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./photo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "photoByDefault",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "file",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'file'"
                        }
                    ]
                },
                {
                    "name": "isUsingWebCam",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "onChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "onTouched",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "photo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'photo'"
                        }
                    ]
                },
                {
                    "name": "statusHover",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "triggerSnapshot",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "changeOriginPhoto",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatSlideToggleChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MatSlideToggleChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "executeLoadImage",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadPhotoFromUrlOrDataUrl",
                    "args": [
                        {
                            "name": "urlOrPath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "urlOrPath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFileDropped",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onImageCapture",
                    "args": [
                        {
                            "name": "webcamImage",
                            "type": "WebcamImage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "webcamImage",
                            "type": "WebcamImage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectImage",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "takePhoto",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "triggerAsObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "val",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  ElementRef,\r\n  forwardRef,\r\n  Input,\r\n  OnInit,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\nimport { Subject } from 'rxjs';\r\nimport { WebcamImage } from 'ngx-webcam';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { environment } from 'projects/backoffice/src/environments/environment';\r\n\r\n@Component({\r\n  selector: 'amb-photo',\r\n  templateUrl: './photo.component.html',\r\n  styleUrls: ['./photo.component.css'],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => PhotoComponent),\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class PhotoComponent implements OnInit, ControlValueAccessor {\r\n  @ViewChild('photo') photo!: ElementRef;\r\n  @ViewChild('file') file!: ElementRef;\r\n  @Input() photoByDefault: string = '';\r\n\r\n  statusHover: boolean = false;\r\n  isUsingWebCam: boolean = false;\r\n  triggerSnapshot = new Subject<void>();\r\n\r\n  value!: File;\r\n\r\n  onChange: any;\r\n  onTouched: any;\r\n\r\n  constructor() {}\r\n\r\n  writeValue(val: File): void {\r\n    if (val) {\r\n      this.value = val;\r\n    }\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  onFileDropped(file: File): void {\r\n    if (!file.type.startsWith('image')) {\r\n      return;\r\n    }\r\n\r\n    this.onTouched();\r\n    this.onChange(file);\r\n\r\n    const fr: FileReader = new FileReader();\r\n    fr.onloadend = (response: any) => {\r\n      const dataBase64: string = response.target.result;\r\n      this.loadPhotoFromUrlOrDataUrl(dataBase64);\r\n    };\r\n\r\n    fr.readAsDataURL(file);\r\n  }\r\n\r\n  executeLoadImage() {\r\n    this.file.nativeElement.click();\r\n    return false;\r\n  }\r\n\r\n  selectImage(event: any) {\r\n    const file: File = event.target.files[0];\r\n    this.onFileDropped(file);\r\n  }\r\n\r\n  changeOriginPhoto(event: MatSlideToggleChange) {\r\n    this.isUsingWebCam = !this.isUsingWebCam;\r\n  }\r\n\r\n  triggerAsObservable() {\r\n    return this.triggerSnapshot.asObservable();\r\n  }\r\n\r\n  takePhoto() {\r\n    this.triggerSnapshot.next();\r\n  }\r\n\r\n  loadPhotoFromUrlOrDataUrl(urlOrPath: string) {\r\n    this.photo.nativeElement.style.backgroundImage = `url(${urlOrPath})`;\r\n  }\r\n\r\n  onImageCapture(webcamImage: WebcamImage) {\r\n    fetch(webcamImage.imageAsDataUrl)\r\n      .then((res) => res.arrayBuffer())\r\n      .then((buffer) => new File([buffer], 'avatar', { type: 'image/jpg' }))\r\n      .then((file) => {\r\n        this.onFileDropped(file);\r\n        this.isUsingWebCam = false;\r\n      });\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (this.photoByDefault) {\r\n      const path = `${environment.apiUrl}/photos/${this.photoByDefault}`;\r\n      this.loadPhotoFromUrlOrDataUrl(path);\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n  width: 100%;\r\n  height: 207px;\r\n  border: 1px solid #ccc;\r\n  cursor: pointer;\r\n  text-align: center;\r\n  line-height: 207px;\r\n  background-repeat: no-repeat;\r\n  background-size: contain;\r\n  background-position-x: center;\r\n  background-position-y: center;\r\n}\r\n\r\n.container.hover {\r\n  border: 1px dashed red;\r\n}\r\n\r\ninput[type=\"file\"] {\r\n  display: none;\r\n}\r\n",
                    "styleUrl": "./photo.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 39
            },
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "templateData": "<div\r\n  class=\"container\"\r\n  *ngIf=\"!isUsingWebCam\"\r\n  [ngClass]=\"{ hover: statusHover }\"\r\n  upload\r\n  (onHover)=\"statusHover = $event\"\r\n  (onFileDropped)=\"onFileDropped($event)\"\r\n  (click)=\"executeLoadImage()\"\r\n  #photo\r\n></div>\r\n<webcam\r\n  *ngIf=\"isUsingWebCam\"\r\n  [height]=\"207\"\r\n  [width]=\"168\"\r\n  [trigger]=\"triggerAsObservable()\"\r\n  (imageCapture)=\"onImageCapture($event)\"\r\n  mirrorImage=\"never\"\r\n></webcam>\r\n<div>\r\n  <mat-slide-toggle\r\n    color=\"primary\"\r\n    [checked]=\"isUsingWebCam\"\r\n    (change)=\"changeOriginPhoto($event)\"\r\n  >\r\n    Usar WebCam\r\n  </mat-slide-toggle>\r\n  <button\r\n    *ngIf=\"isUsingWebCam\"\r\n    mat-icon-button\r\n    color=\"primary\"\r\n    type=\"button\"\r\n    (click)=\"takePhoto()\"\r\n  >\r\n    <mat-icon>add_a_photo</mat-icon>\r\n  </button>\r\n</div>\r\n<input type=\"file\" #file (change)=\"selectImage($event)\" />\r\n"
        },
        {
            "name": "SearchComponent",
            "id": "component-SearchComponent-9a45157a756fcaf2d5ae3906964cfbe19febc336fdcbc9c54d074fd4054edd07033716c6232ad58eadb60c6c8d2d3029992b94a73ca6222d9f3eb617bd07d6b6",
            "file": "projects/backoffice/src/app/shared/components/search/search.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-search",
            "styleUrls": [
                "./search.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./search.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "onSearch",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "search",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'search'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  ElementRef,\r\n  OnInit,\r\n  Output,\r\n  ViewChild,\r\n  EventEmitter,\r\n} from '@angular/core';\r\nimport { debounceTime, distinctUntilChanged, filter, fromEvent } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'amb-search',\r\n  templateUrl: './search.component.html',\r\n  styleUrls: ['./search.component.css'],\r\n})\r\nexport class SearchComponent implements OnInit {\r\n  @ViewChild('search') search!: ElementRef;\r\n  @Output() onSearch: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  ngAfterViewInit() {\r\n    fromEvent(this.search.nativeElement, 'keyup')\r\n      .pipe(\r\n        filter((text: any) => {\r\n          const textValue = text.target.value;\r\n          return textValue.length > 3 || textValue.length === 0;\r\n        }),\r\n        debounceTime(500),\r\n        distinctUntilChanged()\r\n      )\r\n      .subscribe((evt: any) => {\r\n        this.onSearch.emit(evt.target.value.toLowerCase());\r\n      });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "div {\r\n  font-size: 14px;\r\n}\r\n",
                    "styleUrl": "./search.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 18
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>\r\n  <mat-form-field>\r\n    <mat-label>Ingrese el texto a buscar</mat-label>\r\n    <input matInput type=\"text\" #search />\r\n  </mat-form-field>\r\n</div>\r\n"
        },
        {
            "name": "SocketComponent",
            "id": "component-SocketComponent-a882d2bfaabdadaf9668adbfb6d9c4d70871f9170499be4bb02fface942f06738ef5b4ebed6a57154fd1de4ea4b767c96e783b1390dd369450b78335992876f1",
            "file": "projects/backoffice/src/app/dashboard/components/socket/socket.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-socket",
            "styleUrls": [
                "./socket.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./socket.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dataCovid",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DataCovid[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "doughnut",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "gradient",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "legend",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "legendPosition",
                    "defaultValue": "['right', 'below']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "legendTitle",
                    "defaultValue": "'Vacunas'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "scheme",
                    "defaultValue": "'natural'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "view",
                    "defaultValue": "[700, 450]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[number, number]",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { SocketApplication } from '../../application/socket.application';\r\nimport { DataCovid } from '../../domain/entities/data-covid';\r\n\r\n@Component({\r\n  selector: 'amb-socket',\r\n  templateUrl: './socket.component.html',\r\n  styleUrls: ['./socket.component.css'],\r\n})\r\nexport class SocketComponent implements OnInit {\r\n  dataCovid: DataCovid[] = [];\r\n\r\n  view: [number, number] = [700, 450];\r\n  scheme = 'natural';\r\n\r\n  legend = true;\r\n  legendPosition = ['right', 'below'];\r\n  legendTitle = 'Vacunas';\r\n  gradient = true;\r\n  doughnut = true;\r\n\r\n  constructor(private socket: SocketApplication) {}\r\n\r\n  ngOnInit(): void {\r\n    this.socket.listen('dataupdate').subscribe((data: DataCovid[]) => {\r\n      this.dataCovid = data;\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./socket.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "socket",
                        "type": "SocketApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "socket",
                        "type": "SocketApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ngx-charts-pie-chart\r\n  [view]=\"view\"\r\n  [results]=\"dataCovid\"\r\n  [scheme]=\"scheme\"\r\n  [legend]=\"legend\"\r\n  [legendTitle]=\"legendTitle\"\r\n  [gradient]=\"gradient\"\r\n  [doughnut]=\"doughnut\"\r\n></ngx-charts-pie-chart>\r\n"
        },
        {
            "name": "TableComponent",
            "id": "component-TableComponent-ccb39b5ff9f6062f4f940fa7dbac37aea66ac96ae4318bc78352140e362a9665e506fa2def5e44b0cdc15573cb3c2bc66afb842c766936dc53e4a727064a9939",
            "file": "projects/backoffice/src/app/shared/components/table/table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-table",
            "styleUrls": [
                "./table.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "metaData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "MetaDataColumn[]",
                    "decorators": []
                },
                {
                    "name": "selectedColor",
                    "defaultValue": "'#000000'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "subMetaData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "MetaDataColumn[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onChangeSort",
                    "defaultValue": "new EventEmitter<Sort>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter<Sort>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "columnsDef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<MatColumnDef>",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "MatColumnDef, {descendants: true}"
                        }
                    ]
                },
                {
                    "name": "listFields",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "table",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTable<any>",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatTable, {static: true}"
                        }
                    ]
                },
                {
                    "name": "widthColumns",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "changeSort",
                    "args": [
                        {
                            "name": "sort",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sort",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAdditionalFields",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFields",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  ContentChildren,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  QueryList,\r\n  SimpleChange,\r\n  SimpleChanges,\r\n  ViewChild,\r\n  ViewChildren,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport { Sort } from '@angular/material/sort';\r\nimport { MatColumnDef, MatTable } from '@angular/material/table';\r\nimport { MetaDataColumn } from '../../interfaces/metadatacolumn.interface';\r\n\r\n@Component({\r\n  selector: 'amb-table',\r\n  templateUrl: './table.component.html',\r\n  styleUrls: ['./table.component.css'],\r\n})\r\nexport class TableComponent implements OnInit {\r\n  @Output() onChangeSort: EventEmitter<Sort> = new EventEmitter<Sort>();\r\n  @Input() metaData: MetaDataColumn[] = [];\r\n  @Input() subMetaData: MetaDataColumn[] = [];\r\n  @Input() data: any = [];\r\n  @ContentChildren(MatColumnDef, { descendants: true })\r\n  columnsDef!: QueryList<MatColumnDef>;\r\n  @ViewChild(MatTable, { static: true }) table!: MatTable<any>;\r\n  @Input() selectedColor: string = '#000000';\r\n\r\n  widthColumns = '';\r\n  listFields: string[] = [];\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  getFields(): string[] {\r\n    return this.metaData.map((item) => item.field);\r\n  }\r\n\r\n  changeSort(sort: Sort) {\r\n    this.onChangeSort.emit(sort);\r\n  }\r\n\r\n  getAdditionalFields(): string[] {\r\n    this.widthColumns =\r\n      this.subMetaData.length > 0\r\n        ? `1 1 ${100 / this.subMetaData.length}%`\r\n        : '';\r\n    return this.subMetaData.length > 0 ? ['details'] : [];\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    if (!this.columnsDef) {\r\n      return;\r\n    }\r\n\r\n    this.columnsDef.forEach((columnDef) => {\r\n      this.listFields.push(columnDef.name);\r\n      this.table?.addColumnDef(columnDef);\r\n    });\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes['metaData']) {\r\n      this.listFields = this.getFields();\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-table {\r\n  overflow-x: scroll;\r\n}\r\n\r\n.mat-cell,\r\n.mat-header-cell,\r\nth.mat-header-cell {\r\n  word-wrap: break-word;\r\n  max-width: 300px;\r\n  display: table-cell;\r\n  padding: 0 10px !important;\r\n  line-break: unset;\r\n  white-space: break-spaces;\r\n  overflow: hidden;\r\n  vertical-align: middle;\r\n  font-size: 14px !important;\r\n}\r\n\r\n.mat-row,\r\n.mat-header-row {\r\n  margin: 5px 0;\r\n}\r\n\r\ndiv.subRow {\r\n  margin-bottom: 10px;\r\n}\r\n\r\ndiv.subRow div {\r\n  margin: 5px 0;\r\n}\r\n\r\ndiv.headerSubRow {\r\n  margin-top: 8px;\r\n}\r\n\r\n.headerMain {\r\n  background-color: #e9e7e7;\r\n}\r\n\r\n.highlightTitle:hover {\r\n  background-color: #e9e7e7;\r\n}\r\n\r\nstrong {\r\n  font-weight: 300;\r\n}\r\n\r\n.highlight:hover {\r\n  background-color: #f1eeee;\r\n}\r\n",
                    "styleUrl": "./table.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 35
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div fxLayout=\"column\">\r\n  <ng-content></ng-content>\r\n  <table\r\n    mat-table\r\n    [dataSource]=\"data\"\r\n    multiTemplateDataRows\r\n    matSort\r\n    (matSortChange)=\"changeSort($event)\"\r\n  >\r\n    <ng-container [matColumnDef]=\"meta.field\" *ngFor=\"let meta of metaData\">\r\n      <th mat-header-cell *matHeaderCellDef [mat-sort-header]=\"meta.field\">\r\n        {{ meta.header }}\r\n      </th>\r\n      <td mat-cell *matCellDef=\"let row\">\r\n        {{ row[meta.field] }}\r\n      </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"details\">\r\n      <td mat-cell *matCellDef=\"let row\" colSpan=\"{{ metaData.length }}\">\r\n        <div fxLayout class=\"headerSubRow\">\r\n          <strong *ngFor=\"let el of subMetaData\" [fxFlex]=\"widthColumns\">\r\n            {{ el.header }}\r\n          </strong>\r\n        </div>\r\n        <div fxLayout class=\"subRow\">\r\n          <div *ngFor=\"let el of subMetaData\" [fxFlex]=\"widthColumns\">\r\n            {{ row[el.field] }}\r\n          </div>\r\n        </div>\r\n      </td>\r\n    </ng-container>\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"listFields; sticky: true\"></tr>\r\n    <tr\r\n      mat-row\r\n      *matRowDef=\"let row; columns: listFields\"\r\n      [ngClass]=\"{ headerMain: getAdditionalFields().length > 0 }\"\r\n      class=\"highlightTitle\"\r\n    ></tr>\r\n    <tr\r\n      mat-row\r\n      *matRowDef=\"let row; columns: getAdditionalFields()\"\r\n      [ngStyle]=\"{\r\n        display: getAdditionalFields().length > 0 ? 'table-row' : 'none'\r\n      }\"\r\n      class=\"highlight\"\r\n      [ngStyle]=\"{ 'background-color': selectedColor }\"\r\n    ></tr>\r\n  </table>\r\n</div>\r\n"
        },
        {
            "name": "TestComponent",
            "id": "component-TestComponent-aa5b92099f7b6e475de214ab1a3f1b18f456d5c76340722b491c7f8587d692ecb0c209e5c74cd5c6ae4eb291538f44926ae3d0d722d86698fb2c03dce9a05131",
            "file": "projects/backoffice/src/app/test.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-test",
            "styleUrls": [
                "./test.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./test.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "title",
                    "defaultValue": "'app test'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "name01",
                    "defaultValue": "'Sergio'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "name02",
                    "defaultValue": "'Carmen'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "name03",
                    "defaultValue": "'Jorge'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'amb-test',\r\n  templateUrl: './test.component.html',\r\n  /*  template: `<h1>Test</h1>\r\n\r\n    <table>\r\n      <tr>\r\n        <th>Name</th>\r\n      </tr>\r\n      <tr>\r\n        <td>{{ name01 }}</td>\r\n      </tr>\r\n      <tr>\r\n        <td>{{ name02 }}</td>\r\n      </tr>\r\n      <tr>\r\n        <td>{{ name03 }}</td>\r\n      </tr>\r\n    </table>`, */\r\n  // styles: ['h1 { color: red; }', 'table {font-size: 30px}'],\r\n  styleUrls: ['./test.component.css'],\r\n})\r\nexport class TestComponent {\r\n  @Input('title') titulo = 'app test';\r\n  name01 = 'Sergio';\r\n  name02 = 'Carmen';\r\n  name03 = 'Jorge';\r\n\r\n  constructor() {\r\n    setInterval(() => {\r\n      this.name01 = 'Sergio ' + Math.random();\r\n      this.name02 = 'Carmen ' + Math.random();\r\n      this.name03 = 'Jorge ' + Math.random();\r\n    }, 1000);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h1 {\r\n  color: red;\r\n}\r\ntable {\r\n  font-size: 30px;\r\n}\r\n",
                    "styleUrl": "./test.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 29
            },
            "templateData": "<h1>{{ titulo }}</h1>\r\n"
        },
        {
            "name": "TitleComponent",
            "id": "component-TitleComponent-841e78191acd04cc54cc661e8394bff074481a4499a959ec1b07fb639e330fd5eb6d7f68a529daf4f005a4166c279431f6ab6d10c17204e7f308991772e66ea2",
            "file": "projects/backoffice/src/app/shared/components/title/title.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-title",
            "styleUrls": [
                "./title.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./title.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "icon",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'amb-title',\r\n  templateUrl: './title.component.html',\r\n  styleUrls: ['./title.component.css'],\r\n})\r\nexport class TitleComponent implements OnInit {\r\n  @Input() title: string = '';\r\n  @Input() icon: string = '';\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".toolbar {\r\n  background-color: white !important;\r\n  height: 80px;\r\n  border-bottom: 1px solid rgb(226, 232, 240);\r\n  padding: 0 16px;\r\n}\r\n\r\n.info h2 {\r\n  font-size: 24px;\r\n  color: rgb(30, 41, 59);\r\n  line-height: 80px;\r\n  font-weight: 600;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n",
                    "styleUrl": "./title.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"toolbar\" fxLayout fxLayoutAlign=\"space-between\">\r\n  <div class=\"info\" fxLayout fxLayoutAlign=\"start center\" fxLayoutGap=\"10px\">\r\n    <mat-icon>{{ icon }}</mat-icon>\r\n    <h2>{{ title }}</h2>\r\n  </div>\r\n\r\n  <div fxLayout fxLayoutAlign=\"start center\" fxLayoutGap=\"10px\">\r\n    <ng-content></ng-content>\r\n  </div>\r\n</div>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-fe88e2894921f7b1e2948b8d26e3037f0ca1643e8e829077b201f0f2321b438a635f3838bec872101fe7c2246aa8ab7cad0877cccc131a341ced2ba36affffd3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/backoffice/src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { TestComponent } from './test.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { BookComponent } from './book/book.component';\r\nimport { PadreComponent } from './padre/padre.component';\r\nimport { HijoComponent } from './hijo/hijo.component';\r\nimport { CoreModule } from './core/core.module';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { UtilsService } from './helpers/services/utils.service';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { LayoutModule } from './config/modules/layout.module';\r\nimport { LAYOUT_CONSTANTS } from './config/constants/layout.constant';\r\nimport { InactivityModule } from './config/modules/inactivity.module';\r\nimport { INACTIVITY_CONSTANTS } from './config/constants/inactivity.constant';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { MedicInfrastructure } from './medics/infrastructure/medic.infrastructure';\r\nimport { MedicApplication } from './medics/application/medic.application';\r\nimport { TokenInterceptor } from './shared/interceptors/token.interceptor';\r\nimport { DriverInfrastructure } from './drivers/infrastructure/driver.infrastructure';\r\nimport { DriverApplication } from './drivers/application/driver.application';\r\nimport { MatPaginatorIntl } from '@angular/material/paginator';\r\nimport { Paginator } from './shared/classes/paginator';\r\nimport { IconService } from './helpers/services/icon.service';\r\n\r\nconst infrastructure = [MedicInfrastructure, DriverInfrastructure];\r\nconst application = [MedicApplication, DriverApplication];\r\nconst components = [\r\n  AppComponent,\r\n  TestComponent,\r\n  HomeComponent,\r\n  BookComponent,\r\n  PadreComponent,\r\n  HijoComponent,\r\n];\r\nconst bootstrap = [AppComponent];\r\nconst otherServices = [UtilsService];\r\nconst interceptors = [\r\n  { provide: HTTP_INTERCEPTORS, useClass: TokenInterceptor, multi: true },\r\n];\r\nconst modules = [\r\n  BrowserModule,\r\n  CoreModule,\r\n  BrowserAnimationsModule,\r\n  MatSidenavModule,\r\n  AppRoutingModule,\r\n  MatDialogModule,\r\n  LayoutModule.forRoot(LAYOUT_CONSTANTS),\r\n  InactivityModule.forRoot(INACTIVITY_CONSTANTS),\r\n  HttpClientModule,\r\n];\r\n\r\nconst material = [{ provide: MatPaginatorIntl, useClass: Paginator }];\r\n\r\n@NgModule({\r\n  declarations: [...components],\r\n  imports: [...modules],\r\n  providers: [\r\n    ...otherServices,\r\n    ...infrastructure,\r\n    ...application,\r\n    ...interceptors,\r\n    ...material,\r\n  ],\r\n  bootstrap: [...bootstrap],\r\n})\r\nexport class AppModule {\r\n  constructor(private iconService: IconService) {}\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "DriverApplication"
                        },
                        {
                            "name": "DriverInfrastructure"
                        },
                        {
                            "name": "MedicApplication"
                        },
                        {
                            "name": "MedicInfrastructure"
                        },
                        {
                            "name": "UtilsService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "BookComponent"
                        },
                        {
                            "name": "HijoComponent"
                        },
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "PadreComponent"
                        },
                        {
                            "name": "TestComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "bootstrap"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-74f39f4e6c05f26f3c676a559464355acccd0f3729137a85a64fcb5d5c697ecad2ac4678fddd6bdf173c29709754f2cbf844b3a03c0e0b88c6e09efc5cf94c6d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/backoffice/src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { PageLoginComponent } from './core/pages/page-login/page-login.component';\r\nimport { AuthenticationGuard } from './shared/guards/authentication.guard';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: PageLoginComponent,\r\n  },\r\n  {\r\n    path: 'dashboard',\r\n    canLoad: [AuthenticationGuard],\r\n    loadChildren: () =>\r\n      \"import('./dashboard/dashboard.module').then((m) => m.DashboardModule)\",\r\n  },\r\n  {\r\n    path: 'medics',\r\n    canLoad: [AuthenticationGuard],\r\n    loadChildren: () =>\r\n      \"import('./medics/medics.module').then((m) => m.MedicsModule)\",\r\n  },\r\n  {\r\n    path: 'drivers',\r\n    canLoad: [AuthenticationGuard],\r\n    loadChildren: () =>\r\n      \"import('./drivers/drivers.module').then((m) => m.DriversModule)\",\r\n  },\r\n  {\r\n    path: 'histories',\r\n    canLoad: [AuthenticationGuard],\r\n    loadChildren: () =>\r\n      \"import('./histories/histories.module').then((m) => m.HistoriesModule)\",\r\n  },\r\n  {\r\n    path: '**',\r\n    redirectTo: '',\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AppRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-1f7e9b641feef48ab62f6791c867f60e6dbef9c09f2c8f555a915f1084d7617a981fdeca93712ee7ee8c8c19e3d047e216c1e57fd1ea74719b80aac6728c84b3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/backoffice/src/app/core/core.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PageLoginComponent } from './pages/page-login/page-login.component';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { MenuComponent } from './components/menu/menu.component';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { RouterModule } from '@angular/router';\r\nimport { HeaderComponent } from './components/header/header.component';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { PageLockScreenComponent } from './pages/page-lock-screen/page-lock-screen.component';\r\nimport { LockScreenComponent } from './components/lock-screen/lock-screen.component';\r\nimport { AuthInfrastructure } from './infrastructure/auth.infrastructure';\r\nimport { AuthApplication } from './application/auth.application';\r\nimport { StorageInfrastructure } from './infrastructure/storage.infrastructure';\r\nimport { StorageApplication } from './application/storage.application';\r\n\r\nconst infrastructure = [AuthInfrastructure, StorageInfrastructure];\r\nconst application = [AuthApplication, StorageApplication];\r\n@NgModule({\r\n  declarations: [\r\n    PageLoginComponent,\r\n    LoginComponent,\r\n    MenuComponent,\r\n    HeaderComponent,\r\n    PageLockScreenComponent,\r\n    LockScreenComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MatListModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    RouterModule,\r\n    MatToolbarModule,\r\n    FlexLayoutModule,\r\n    MatMenuModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    ReactiveFormsModule,\r\n  ],\r\n  exports: [\r\n    PageLoginComponent,\r\n    MenuComponent,\r\n    HeaderComponent,\r\n    PageLockScreenComponent,\r\n  ],\r\n  providers: [...infrastructure, ...application],\r\n})\r\nexport class CoreModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "DriverApplication"
                        },
                        {
                            "name": "DriverInfrastructure"
                        },
                        {
                            "name": "MedicApplication"
                        },
                        {
                            "name": "MedicInfrastructure"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "LockScreenComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "MenuComponent"
                        },
                        {
                            "name": "PageLockScreenComponent"
                        },
                        {
                            "name": "PageLoginComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MenuComponent"
                        },
                        {
                            "name": "PageLockScreenComponent"
                        },
                        {
                            "name": "PageLoginComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DashboardModule",
            "id": "module-DashboardModule-bac95504fc3567e1a21208a5d753ab06e511e67de7943ac7fa11727a65b5c9c8aac9ad1e3e28a9d5d92c1f12c1e8ef39b526bc036ac763e601fc35259d17ee27",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/backoffice/src/app/dashboard/dashboard.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PageDashboardComponent } from './pages/page-dashboard/page-dashboard.component';\r\nimport { DashboardRoutingModule } from './dashboard-routing.module';\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { CovidComponent } from './components/covid/covid.component';\r\nimport { NgxChartsModule } from '@swimlane/ngx-charts';\r\nimport { CovidApplication } from './application/covid.application';\r\nimport { CovidInfrastructure } from './infrastructure/covid.infrastructure';\r\nimport { SocketComponent } from './components/socket/socket.component';\r\nimport { SocketApplication } from './application/socket.application';\r\nimport { SocketInfrastructure } from './infrastructure/socket.infrastructure';\r\n\r\n@NgModule({\r\n  declarations: [PageDashboardComponent, CovidComponent, SocketComponent],\r\n  imports: [\r\n    CommonModule,\r\n    NgxChartsModule,\r\n    DashboardRoutingModule,\r\n    SharedModule,\r\n  ],\r\n  providers: [\r\n    CovidApplication,\r\n    CovidInfrastructure,\r\n    SocketApplication,\r\n    SocketInfrastructure,\r\n  ],\r\n})\r\nexport class DashboardModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "CovidApplication"
                        },
                        {
                            "name": "CovidInfrastructure"
                        },
                        {
                            "name": "SocketApplication"
                        },
                        {
                            "name": "SocketInfrastructure"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CovidComponent"
                        },
                        {
                            "name": "PageDashboardComponent"
                        },
                        {
                            "name": "SocketComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DashboardRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DashboardRoutingModule",
            "id": "module-DashboardRoutingModule-3bf489b45683b61f553086df89930c68b2c6f04f7ce1d00188d57e8535e58caf2fe75e42cdfdec7045bc7a2c0a7d665a000bee987b31d2c17c9ed7f4eaf11cea",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/backoffice/src/app/dashboard/dashboard-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { AuthenticationGuard } from '../shared/guards/authentication.guard';\r\nimport { PageDashboardComponent } from './pages/page-dashboard/page-dashboard.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: PageDashboardComponent,\r\n    canActivate: [AuthenticationGuard],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n})\r\nexport class DashboardRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DriversModule",
            "id": "module-DriversModule-33708394f9b1a4badb64a52fcd936dce47817d9ca8d6f057e7a500b45f9b4bbc0b82dee5204e821634e6001d74b8dfd6e7a364cabfc7dc020f316efefaa0a3da",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/backoffice/src/app/drivers/drivers.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { DriversRoutingModule } from './drivers-routing.module';\r\nimport { PageDriversComponent } from './pages/page-drivers/page-drivers.component';\r\nimport { SharedModule } from '../shared/shared.module';\r\n\r\n@NgModule({\r\n  declarations: [PageDriversComponent],\r\n  imports: [CommonModule, DriversRoutingModule, SharedModule],\r\n})\r\nexport class DriversModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PageDriversComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DriversRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DriversRoutingModule",
            "id": "module-DriversRoutingModule-e7d099c83b09fff40931ea82d64ebcbca75daa0bba0116b67963ab20a0c6af00b5c30b034e86da53352d43bd61ce5d1cad03d57a26f50c50ab0e67e25ef92db2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/backoffice/src/app/drivers/drivers-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { PageDriversComponent } from './pages/page-drivers/page-drivers.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: PageDriversComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class DriversRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HistoriesModule",
            "id": "module-HistoriesModule-1517e455e1c5ecbe0a64a20f7fe9d24a1564d1121bdecd6acbdc3937a09c02486c24604023846d882d6243cc9b35f9d4aae613a08d0f85b3672aac261165207b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/backoffice/src/app/histories/histories.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { HistoriesRoutingModule } from './histories-routing.module';\r\nimport { PageHistoriesComponent } from './pages/page-histories/page-histories.component';\r\nimport { SharedModule } from '../shared/shared.module';\r\n\r\n@NgModule({\r\n  declarations: [PageHistoriesComponent],\r\n  imports: [CommonModule, HistoriesRoutingModule, SharedModule],\r\n})\r\nexport class HistoriesModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PageHistoriesComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "HistoriesRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HistoriesRoutingModule",
            "id": "module-HistoriesRoutingModule-35fe56a55d9080239d2bc9c90691246d75a5ae946696a7d85e8a5a648b34bc19349a998070d8910951f8d58073fd141026f3b4c211f3221d4b347f2dc137e3b7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/backoffice/src/app/histories/histories-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { PageHistoriesComponent } from './pages/page-histories/page-histories.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: PageHistoriesComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class HistoriesRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InactivityModule",
            "id": "module-InactivityModule-6a300559a778f3fef12d980c57d6cbbf001c410809f29d7aeb7e9f7eefa4d091006459cfc7e7e25951c9d4c2ed97dfcab575fb04d0da1f3112f55db5f241fd8d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/backoffice/src/app/config/modules/inactivity.module.ts",
            "methods": [
                {
                    "name": "forRoot",
                    "args": [
                        {
                            "name": "config",
                            "type": "IInactivity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ModuleWithProviders<InactivityModule>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "IInactivity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "sourceCode": "import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { IInactivity } from '../interfaces/inactivity.interface';\r\nimport { INACTIVITY_TOKEN } from '../tokens/inactivity.token';\r\n\r\n@NgModule()\r\nexport class InactivityModule {\r\n  static forRoot(config: IInactivity): ModuleWithProviders<InactivityModule> {\r\n    return {\r\n      ngModule: InactivityModule,\r\n      providers: [\r\n        {\r\n          provide: INACTIVITY_TOKEN,\r\n          useValue: config,\r\n        },\r\n      ],\r\n    };\r\n  }\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LayoutModule",
            "id": "module-LayoutModule-36d4a8381b6194c0520d06062141ac214f56457ffa21bd6347a103bd51c1b9791cf3a87e40028408a990245aac54b4a8bc4858447eed67db34b93207cc9ab5fc",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/backoffice/src/app/config/modules/layout.module.ts",
            "methods": [
                {
                    "name": "forRoot",
                    "args": [
                        {
                            "name": "config",
                            "type": "ILayout",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ModuleWithProviders<LayoutModule>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "ILayout",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "sourceCode": "import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { ILayout } from '../interfaces/layout.interface';\r\nimport { LAYOUT_TOKEN } from '../tokens/layout.token';\r\n\r\n@NgModule()\r\nexport class LayoutModule {\r\n  static forRoot(config: ILayout): ModuleWithProviders<LayoutModule> {\r\n    return {\r\n      ngModule: LayoutModule,\r\n      providers: [{ provide: LAYOUT_TOKEN, useValue: config }],\r\n    };\r\n  }\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MedicsModule",
            "id": "module-MedicsModule-df09b89fac778089fb921bc200049b91f073199ca764a624b43f0e8f26aa963662d2fce2c2611ac74640db51c11132122ec3fb2503c800443682566c1eaa2622",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/backoffice/src/app/medics/medics.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { MedicsRoutingModule } from './medics-routing.module';\r\nimport { PageMedicsComponent } from './pages/page-medics/page-medics.component';\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { FormComponent } from './components/form/form.component';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  declarations: [PageMedicsComponent, FormComponent],\r\n  imports: [\r\n    CommonModule,\r\n    MedicsRoutingModule,\r\n    SharedModule,\r\n    ReactiveFormsModule,\r\n  ],\r\n})\r\nexport class MedicsModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FormComponent"
                        },
                        {
                            "name": "PageMedicsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MedicsRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MedicsRoutingModule",
            "id": "module-MedicsRoutingModule-d07c88930d8b86d05f717477550020367395844f9c791879a326c0cfe7a88589a1b71b8914cd97e8da1ea08c1171ab6d3df83391b9d46cd2f7a16e40b01752c7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/backoffice/src/app/medics/medics-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { PageMedicsComponent } from './pages/page-medics/page-medics.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: PageMedicsComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class MedicsRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-761644464971a75c7864852b785293e757d5ba17a88f04481d06d4182a14650132e6cb02f9338a1b08688f63e263acb5e4ceeb670257b869ed5dbad2851e6e07",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/backoffice/src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { ContainerComponent } from './components/container/container.component';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { TitleComponent } from './components/title/title.component';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { TableComponent } from './components/table/table.component';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { ConfirmComponent } from './components/confirm/confirm.component';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport {\r\n  PerfectScrollbarConfigInterface,\r\n  PerfectScrollbarModule,\r\n  PERFECT_SCROLLBAR_CONFIG,\r\n} from 'ngx-perfect-scrollbar';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { PhotoComponent } from './components/photo/photo.component';\r\nimport { UploadDirective } from './directives/upload.directive';\r\nimport { WebcamModule } from 'ngx-webcam';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { PaginatorComponent } from './components/paginator/paginator.component';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { SearchComponent } from './components/search/search.component';\r\nimport { RolesAllowedDirective } from './directives/roles-allowed.directive';\r\n\r\nconst DEFAULT_PERFECT_SCROLLBAR_CONFIG: PerfectScrollbarConfigInterface = {\r\n  suppressScrollX: false,\r\n};\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ContainerComponent,\r\n    TitleComponent,\r\n    TableComponent,\r\n    ConfirmComponent,\r\n    PhotoComponent,\r\n    UploadDirective,\r\n    PaginatorComponent,\r\n    SearchComponent,\r\n    RolesAllowedDirective,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MatCardModule,\r\n    FlexLayoutModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatTableModule,\r\n    MatSortModule,\r\n    MatDialogModule,\r\n    WebcamModule,\r\n    MatSlideToggleModule,\r\n    MatPaginatorModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n  ],\r\n  exports: [\r\n    MatCardModule,\r\n    ContainerComponent,\r\n    TitleComponent,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    TableComponent,\r\n    MatTableModule,\r\n    MatTooltipModule,\r\n    MatDialogModule,\r\n    ConfirmComponent,\r\n    MatToolbarModule,\r\n    FlexLayoutModule,\r\n    PerfectScrollbarModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    PhotoComponent,\r\n    PaginatorComponent,\r\n    SearchComponent,\r\n    RolesAllowedDirective,\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: PERFECT_SCROLLBAR_CONFIG,\r\n      useValue: DEFAULT_PERFECT_SCROLLBAR_CONFIG,\r\n    },\r\n  ],\r\n})\r\nexport class SharedModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ConfirmComponent"
                        },
                        {
                            "name": "ContainerComponent"
                        },
                        {
                            "name": "PaginatorComponent"
                        },
                        {
                            "name": "PhotoComponent"
                        },
                        {
                            "name": "RolesAllowedDirective"
                        },
                        {
                            "name": "SearchComponent"
                        },
                        {
                            "name": "TableComponent"
                        },
                        {
                            "name": "TitleComponent"
                        },
                        {
                            "name": "UploadDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ConfirmComponent"
                        },
                        {
                            "name": "ContainerComponent"
                        },
                        {
                            "name": "PaginatorComponent"
                        },
                        {
                            "name": "PhotoComponent"
                        },
                        {
                            "name": "RolesAllowedDirective"
                        },
                        {
                            "name": "SearchComponent"
                        },
                        {
                            "name": "TableComponent"
                        },
                        {
                            "name": "TitleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "application",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/backoffice/src/app/app.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[MedicApplication, DriverApplication]"
            },
            {
                "name": "application",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/backoffice/src/app/core/core.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[AuthApplication, StorageApplication]"
            },
            {
                "name": "bootstrap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/backoffice/src/app/app.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[AppComponent]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/backoffice/src/app/app.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  AppComponent,\r\n  TestComponent,\r\n  HomeComponent,\r\n  BookComponent,\r\n  PadreComponent,\r\n  HijoComponent,\r\n]"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/backoffice/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "DEFAULT_PERFECT_SCROLLBAR_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/backoffice/src/app/shared/shared.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "PerfectScrollbarConfigInterface",
                "defaultValue": "{\r\n  suppressScrollX: false,\r\n}"
            },
            {
                "name": "Drivers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/backoffice/src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n  apiUrl: 'https://api-cursoangular.cursos-dev.com',\r\n  pageSize: 6,\r\n  apiCovid: \"/api/confirmed\",\r\n  apiSocket: \"https://p7inv.sse.codesandbox.io/\"\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/backoffice/src/environments/environment.uat.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n  apiUrl: 'https://api-cursoangular.cursos-dev.com',\r\n  pageSize: 30,\r\n  apiCovid: 'https://covid19.mathdro.id/api/confirmed',\r\n  apiSocket: 'https://p7inv.sse.codesandbox.io/',\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/backoffice/src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: true,\r\n  apiUrl: 'https://api-cursoangular.cursos-dev.com',\r\n  pageSize: 30,\r\n  apiCovid: 'https://covid19.mathdro.id/api/confirmed',\r\n  apiSocket: 'https://p7inv.sse.codesandbox.io/',\r\n}"
            },
            {
                "name": "INACTIVITY_CONSTANTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/backoffice/src/app/config/constants/inactivity.constant.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IInactivity",
                "defaultValue": "{\r\n  timeout: 45 * 60 * 1000,\r\n}"
            },
            {
                "name": "INACTIVITY_TOKEN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/backoffice/src/app/config/tokens/inactivity.token.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<number>('inactivity')"
            },
            {
                "name": "infrastructure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/backoffice/src/app/app.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[MedicInfrastructure, DriverInfrastructure]"
            },
            {
                "name": "infrastructure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/backoffice/src/app/core/core.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[AuthInfrastructure, StorageInfrastructure]"
            },
            {
                "name": "interceptors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/backoffice/src/app/app.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  { provide: HTTP_INTERCEPTORS, useClass: TokenInterceptor, multi: true },\r\n]"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LAYOUT_CONSTANTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/backoffice/src/app/config/constants/layout.constant.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ILayout",
                "defaultValue": "{ header: true, menu: true }"
            },
            {
                "name": "LAYOUT_TOKEN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/backoffice/src/app/config/tokens/layout.token.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken('layout token')"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "material",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/backoffice/src/app/app.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[{ provide: MatPaginatorIntl, useClass: Paginator }]"
            },
            {
                "name": "Medics",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "modules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/backoffice/src/app/app.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  BrowserModule,\r\n  CoreModule,\r\n  BrowserAnimationsModule,\r\n  MatSidenavModule,\r\n  AppRoutingModule,\r\n  MatDialogModule,\r\n  LayoutModule.forRoot(LAYOUT_CONSTANTS),\r\n  InactivityModule.forRoot(INACTIVITY_CONSTANTS),\r\n  HttpClientModule,\r\n]"
            },
            {
                "name": "otherServices",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/backoffice/src/app/app.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[UtilsService]"
            },
            {
                "name": "pdfFonts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/backoffice/src/app/helpers/services/utils.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require('pdfmake/build/vfs_fonts.js')"
            },
            {
                "name": "pdfMake",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/backoffice/src/app/helpers/services/utils.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require('pdfmake/build/pdfmake.js')"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/backoffice/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/backoffice/src/app/helpers/services/utils.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TableComponent>",
                "defaultValue": "(args: TableComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "DriverProperties",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/backoffice/src/app/drivers/domain/entities/driver.entity.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "DriverPropertiesOptional",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Partial<literal type>",
                "file": "projects/backoffice/src/app/drivers/domain/entities/driver.entity.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "DriverPropertiesRequired",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Required<literal type>",
                "file": "projects/backoffice/src/app/drivers/domain/entities/driver.entity.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "MedicProperties",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/backoffice/src/app/medics/domain/entities/medic.entity.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "MedicPropertiesOptional",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Partial<literal type>",
                "file": "projects/backoffice/src/app/medics/domain/entities/medic.entity.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "MedicPropertiesRequired",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Required<literal type>",
                "file": "projects/backoffice/src/app/medics/domain/entities/medic.entity.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "TUser",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "User[]",
                "file": "projects/backoffice/src/app/padre/padre.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 182
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/backoffice/src/app/app.module.ts": [
                {
                    "name": "application",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/backoffice/src/app/app.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[MedicApplication, DriverApplication]"
                },
                {
                    "name": "bootstrap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/backoffice/src/app/app.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[AppComponent]"
                },
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/backoffice/src/app/app.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  AppComponent,\r\n  TestComponent,\r\n  HomeComponent,\r\n  BookComponent,\r\n  PadreComponent,\r\n  HijoComponent,\r\n]"
                },
                {
                    "name": "infrastructure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/backoffice/src/app/app.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[MedicInfrastructure, DriverInfrastructure]"
                },
                {
                    "name": "interceptors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/backoffice/src/app/app.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  { provide: HTTP_INTERCEPTORS, useClass: TokenInterceptor, multi: true },\r\n]"
                },
                {
                    "name": "material",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/backoffice/src/app/app.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[{ provide: MatPaginatorIntl, useClass: Paginator }]"
                },
                {
                    "name": "modules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/backoffice/src/app/app.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  BrowserModule,\r\n  CoreModule,\r\n  BrowserAnimationsModule,\r\n  MatSidenavModule,\r\n  AppRoutingModule,\r\n  MatDialogModule,\r\n  LayoutModule.forRoot(LAYOUT_CONSTANTS),\r\n  InactivityModule.forRoot(INACTIVITY_CONSTANTS),\r\n  HttpClientModule,\r\n]"
                },
                {
                    "name": "otherServices",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/backoffice/src/app/app.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[UtilsService]"
                }
            ],
            "projects/backoffice/src/app/core/core.module.ts": [
                {
                    "name": "application",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/backoffice/src/app/core/core.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[AuthApplication, StorageApplication]"
                },
                {
                    "name": "infrastructure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/backoffice/src/app/core/core.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[AuthInfrastructure, StorageInfrastructure]"
                }
            ],
            "projects/backoffice/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/backoffice/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/backoffice/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/backoffice/src/app/shared/shared.module.ts": [
                {
                    "name": "DEFAULT_PERFECT_SCROLLBAR_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/backoffice/src/app/shared/shared.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PerfectScrollbarConfigInterface",
                    "defaultValue": "{\r\n  suppressScrollX: false,\r\n}"
                }
            ],
            "stories/Table.stories.ts": [
                {
                    "name": "Drivers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Medics",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TableComponent>",
                    "defaultValue": "(args: TableComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "projects/backoffice/src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/backoffice/src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n  apiUrl: 'https://api-cursoangular.cursos-dev.com',\r\n  pageSize: 6,\r\n  apiCovid: \"/api/confirmed\",\r\n  apiSocket: \"https://p7inv.sse.codesandbox.io/\"\r\n}"
                }
            ],
            "projects/backoffice/src/environments/environment.uat.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/backoffice/src/environments/environment.uat.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n  apiUrl: 'https://api-cursoangular.cursos-dev.com',\r\n  pageSize: 30,\r\n  apiCovid: 'https://covid19.mathdro.id/api/confirmed',\r\n  apiSocket: 'https://p7inv.sse.codesandbox.io/',\r\n}"
                }
            ],
            "projects/backoffice/src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/backoffice/src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true,\r\n  apiUrl: 'https://api-cursoangular.cursos-dev.com',\r\n  pageSize: 30,\r\n  apiCovid: 'https://covid19.mathdro.id/api/confirmed',\r\n  apiSocket: 'https://p7inv.sse.codesandbox.io/',\r\n}"
                }
            ],
            "projects/backoffice/src/app/config/constants/inactivity.constant.ts": [
                {
                    "name": "INACTIVITY_CONSTANTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/backoffice/src/app/config/constants/inactivity.constant.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IInactivity",
                    "defaultValue": "{\r\n  timeout: 45 * 60 * 1000,\r\n}"
                }
            ],
            "projects/backoffice/src/app/config/tokens/inactivity.token.ts": [
                {
                    "name": "INACTIVITY_TOKEN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/backoffice/src/app/config/tokens/inactivity.token.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<number>('inactivity')"
                }
            ],
            "stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "projects/backoffice/src/app/config/constants/layout.constant.ts": [
                {
                    "name": "LAYOUT_CONSTANTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/backoffice/src/app/config/constants/layout.constant.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILayout",
                    "defaultValue": "{ header: true, menu: true }"
                }
            ],
            "projects/backoffice/src/app/config/tokens/layout.token.ts": [
                {
                    "name": "LAYOUT_TOKEN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/backoffice/src/app/config/tokens/layout.token.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken('layout token')"
                }
            ],
            "stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "projects/backoffice/src/app/helpers/services/utils.service.ts": [
                {
                    "name": "pdfFonts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/backoffice/src/app/helpers/services/utils.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require('pdfmake/build/vfs_fonts.js')"
                },
                {
                    "name": "pdfMake",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/backoffice/src/app/helpers/services/utils.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require('pdfmake/build/pdfmake.js')"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/backoffice/src/app/helpers/services/utils.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/backoffice/src/app/drivers/domain/entities/driver.entity.ts": [
                {
                    "name": "DriverProperties",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/backoffice/src/app/drivers/domain/entities/driver.entity.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "DriverPropertiesOptional",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Partial<literal type>",
                    "file": "projects/backoffice/src/app/drivers/domain/entities/driver.entity.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "DriverPropertiesRequired",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Required<literal type>",
                    "file": "projects/backoffice/src/app/drivers/domain/entities/driver.entity.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/backoffice/src/app/medics/domain/entities/medic.entity.ts": [
                {
                    "name": "MedicProperties",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/backoffice/src/app/medics/domain/entities/medic.entity.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "MedicPropertiesOptional",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Partial<literal type>",
                    "file": "projects/backoffice/src/app/medics/domain/entities/medic.entity.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "MedicPropertiesRequired",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Required<literal type>",
                    "file": "projects/backoffice/src/app/medics/domain/entities/medic.entity.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/backoffice/src/app/padre/padre.component.ts": [
                {
                    "name": "TUser",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "User[]",
                    "file": "projects/backoffice/src/app/padre/padre.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 182
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "projects/backoffice/src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "PageLoginComponent"
                    },
                    {
                        "path": "dashboard",
                        "canLoad": [
                            "AuthenticationGuard"
                        ],
                        "loadChildren": "./dashboard/dashboard.module#DashboardModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "projects/backoffice/src/app/dashboard/dashboard-routing.module.ts",
                                        "module": "DashboardRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "PageDashboardComponent",
                                                "canActivate": [
                                                    "AuthenticationGuard"
                                                ]
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "DashboardModule"
                            }
                        ]
                    },
                    {
                        "path": "medics",
                        "canLoad": [
                            "AuthenticationGuard"
                        ],
                        "loadChildren": "./medics/medics.module#MedicsModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "projects/backoffice/src/app/medics/medics-routing.module.ts",
                                        "module": "MedicsRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "PageMedicsComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "MedicsModule"
                            }
                        ]
                    },
                    {
                        "path": "drivers",
                        "canLoad": [
                            "AuthenticationGuard"
                        ],
                        "loadChildren": "./drivers/drivers.module#DriversModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "projects/backoffice/src/app/drivers/drivers-routing.module.ts",
                                        "module": "DriversRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "PageDriversComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "DriversModule"
                            }
                        ]
                    },
                    {
                        "path": "histories",
                        "canLoad": [
                            "AuthenticationGuard"
                        ],
                        "loadChildren": "./histories/histories.module#HistoriesModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "projects/backoffice/src/app/histories/histories-routing.module.ts",
                                        "module": "HistoriesRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "PageHistoriesComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "HistoriesModule"
                            }
                        ]
                    },
                    {
                        "path": "**",
                        "redirectTo": ""
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/backoffice/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "application",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bootstrap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "infrastructure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "interceptors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "material",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "modules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "otherServices",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/book/book.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BookComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/book/domain/book.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BookItem",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/book/domain/vo/title.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Title",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/config/constants/inactivity.constant.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INACTIVITY_CONSTANTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/config/constants/layout.constant.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LAYOUT_CONSTANTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/config/interfaces/inactivity.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IInactivity",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/config/interfaces/layout.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILayout",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/config/services/inactivity.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "InactivityService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/config/services/layout.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LayoutService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/config/tokens/inactivity.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INACTIVITY_TOKEN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/config/tokens/layout.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LAYOUT_TOKEN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/core/application/auth.application.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthApplication",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/core/application/storage.application.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StorageApplication",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/core/application/tokens.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Tokens",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/core/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/core/components/header/header.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPayload",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/core/components/lock-screen/lock-screen.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LockScreenComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/core/components/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/core/components/menu/menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/core/core.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "application",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/core/core.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "infrastructure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/core/domain/entities/auth.entity.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AuthEntity",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/core/domain/repositories/auth.repository.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthRepository",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/core/domain/repositories/storage.repository.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StorageRepository",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/core/infrastructure/auth.infrastructure.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthInfrastructure",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/core/infrastructure/storage.infrastructure.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StorageInfrastructure",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/core/infrastructure/storage.infrastructure.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPayload",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/core/pages/page-lock-screen/page-lock-screen.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageLockScreenComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/core/pages/page-login/page-login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageLoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/dashboard/application/covid.application.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CovidApplication",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/dashboard/application/socket.application.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SocketApplication",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/dashboard/components/covid/covid.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CovidComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/dashboard/components/socket/socket.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SocketComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/dashboard/domain/entities/data-covid.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DataCovid",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/dashboard/domain/models/covid.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CovidModel",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/dashboard/domain/repositories/covid.repository.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CovidRepository",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/dashboard/domain/repositories/socket.repository.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SocketRepository",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/dashboard/infrastructure/covid.infrastructure.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CovidInfrastructure",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/dashboard/infrastructure/socket.infrastructure.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SocketInfrastructure",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/dashboard/pages/page-dashboard/page-dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageDashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/drivers/application/driver.application.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DriverApplication",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/drivers/domain/entities/driver.entity.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DriverEntity",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/drivers/domain/repositories/driver.repository.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DriverRepository",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/drivers/infrastructure/driver.infrastructure.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DriverInfrastructure",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/drivers/pages/page-drivers/page-drivers.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageDriversComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/helpers/services/icon.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "IconService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/helpers/services/icon.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IIcon",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/helpers/services/utils.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UtilsService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/helpers/services/utils.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pdfFonts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/helpers/services/utils.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pdfMake",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/helpers/services/utils.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/hijo/hijo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HijoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/histories/pages/page-histories/page-histories.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageHistoriesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/medics/application/medic.application.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MedicApplication",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/medics/components/form/form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/medics/domain/entities/medic.entity.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MedicEntity",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/medics/domain/repositories/medic.repository.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MedicRepository",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/medics/infrastructure/medic.infrastructure.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MedicInfrastructure",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/medics/pages/page-medics/page-medics.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageMedicsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/padre/padre.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PadreComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/padre/padre.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/shared/classes/authorizations.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Authorizations",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/shared/classes/base-component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/shared/classes/paginator.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Paginator",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/shared/components/confirm/confirm.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/shared/components/container/container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/shared/components/paginator/paginator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaginatorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/shared/components/photo/photo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PhotoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/shared/components/search/search.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/shared/components/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/shared/components/title/title.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TitleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/shared/directives/roles-allowed.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "RolesAllowedDirective",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/shared/directives/upload.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "UploadDirective",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/shared/guards/authentication.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthenticationGuard",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/shared/helpers/validators.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ValidatorsCustom",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/shared/interceptors/token.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "TokenInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/shared/interfaces/metadatacolumn.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MetaDataColumn",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/shared/interfaces/result-page.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ResultPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/shared/shared.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_PERFECT_SCROLLBAR_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/app/test.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TestComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/environments/environment.uat.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/backoffice/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Drivers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Medics",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}